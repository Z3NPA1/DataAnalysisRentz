{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getDoc, setDoc, doc, getFirestore, collection, updateDoc, query, getDocs, deleteDoc } from 'firebase/firestore';\nimport { getStorage, ref, uploadBytes, getDownloadURL, listAll } from 'firebase/storage';\nimport { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword } from 'firebase/auth';\nimport { getAnalytics } from \"firebase/analytics\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDEbn57UVIaoPmT8C8NrV_3WMmIKs9R4YE\",\n  authDomain: \"rentz-555.firebaseapp.com\",\n  projectId: \"rentz-555\",\n  storageBucket: \"rentz-555.appspot.com\",\n  messagingSenderId: \"36444490901\",\n  appId: \"1:36444490901:web:9b54077949595de2b01f9c\",\n  measurementId: \"G-8MK34XN24L\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\nconst db = getFirestore();\n\n//initializing admin\n\n//creating room document;\nexport const createRoomDocument = async data => {\n  const CollectionRef = collection(db, 'roomData');\n  const DocumentRef = doc(CollectionRef, `${data.houseId}`);\n  const DocumentSnapShot = await getDoc(DocumentRef);\n  if (!DocumentSnapShot.exists()) {\n    const createdAt = new Date();\n    try {\n      await setDoc(DocumentRef, {\n        createdAt,\n        ...data\n      });\n    } catch (error) {\n      console.log('error setting document', error);\n    }\n  }\n  return DocumentSnapShot;\n};\nexport const updateImageBox = async (updatedData, roomName) => {\n  const DocumentRef = doc(db, 'roomData', `${roomName}`);\n  try {\n    await updateDoc(DocumentRef, {\n      'imageBox': updatedData\n    });\n    console.log('imageBox updated');\n  } catch (error) {\n    console.log('error updating document', error);\n  }\n};\nexport const updateIsEmpty = async (updatedData, roomName) => {\n  console.log(updatedData);\n  console.log(roomName);\n  try {\n    const RoomDocumentRef = doc(db, 'roomData', roomName.id);\n    await updateDoc(RoomDocumentRef, {\n      'isEmpty': updatedData\n    });\n    console.log('this document will now be displyed or de-displayed according to what you choose');\n  } catch (error) {\n    console.log('error updating document', error);\n  }\n};\n\n//creating documents of all the requests of owners to do business with us;\nexport const createRequestDocument = async data => {\n  try {\n    const collectionRef = collection(db, 'Requests');\n    const documentRef = doc(collectionRef, `${data.emailId}`);\n    await setDoc(documentRef, data);\n    console.log('document Creation Success');\n  } catch (error) {\n    console.log(error);\n  }\n  ;\n};\nexport const uploadLegalDocument = async (img, email) => {\n  try {\n    const adharRef = ref(storage, `request:${email}/`);\n    const folderRef = ref(adharRef, 'adharCard');\n    for (const imageFile of img) {\n      const creationRef = ref(folderRef, imageFile.name);\n      await uploadBytes(creationRef, imageFile);\n      console.log('image updated');\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const uploadLegalDocumentII = async (img, email) => {\n  try {\n    const adharRef = ref(storage, `request:${email}/`);\n    const folderRef = ref(adharRef, 'HouseDocument');\n    for (const imageFile of img) {\n      const creationRef = ref(folderRef, imageFile.name);\n      await uploadBytes(creationRef, imageFile);\n      console.log('image updated');\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//fetching adhar card image from firebase storage to firestore\n\nexport const fetchAdharUrl = async email => {\n  try {\n    const docRef = ref(storage, `request:${email}/`);\n    const imageRef = ref(docRef, 'adharCard');\n    const imageList = await listAll(imageRef);\n    const urls = await Promise.all(imageList.items.map(async item => {\n      const url = await getDownloadURL(item);\n      return url;\n    }));\n    console.log(urls);\n    await updateAdharUrl(urls, email); // Update the Firestore document with the URLs\n    return urls;\n  } catch (error) {\n    console.log(error);\n    throw error;\n  }\n};\nexport const updateAdharUrl = async (adharUrls, email) => {\n  try {\n    const docRef = doc(db, 'Requests', `${email}`);\n    await updateDoc(docRef, {\n      adharCard: adharUrls\n    });\n    console.log('adharCard Update Successful');\n  } catch (error) {\n    console.log(error);\n    throw error;\n  }\n};\n\n//fetching houseDocument from firebase storage to firestore\nexport const fetchHouseDocUrl = async email => {\n  try {\n    const docRef = ref(storage, `request:${email}/`);\n    const imageRef = ref(docRef, 'HouseDocument/');\n    const imageList = await listAll(imageRef);\n    const urls = await Promise.all(imageList.items.map(async item => {\n      const url = await getDownloadURL(item);\n      return url;\n    }));\n    await updateHouseDocUrl(urls, email);\n    return urls;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updateHouseDocUrl = async (houseDocUrl, email) => {\n  try {\n    const docRef = doc(db, 'Requests', `${email}`);\n    await updateDoc(docRef, {\n      houseDoc: houseDocUrl\n    });\n    console.log('HouseDoc Update Successful');\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// storage functions\nexport const storage = getStorage(app);\nexport const uploadImages = async (imageFiles, houseId) => {\n  console.log(houseId);\n  const storageRef = ref(storage, `${houseId}/`);\n  try {\n    for (const imageFile of imageFiles) {\n      const fileRef = ref(storageRef, imageFile.name);\n      await uploadBytes(fileRef, imageFile);\n      console.log('image upload success');\n    }\n    ;\n  } catch (error) {\n    console.log('error uploading the document');\n  }\n  ;\n  return storageRef;\n};\n\n//fetching urls\nexport const fetchUrls = async houseId => {\n  try {\n    const folderRef = ref(storage, `${houseId}/`);\n    const list = await listAll(folderRef);\n    const urls = await Promise.all(list.items.map(async item => {\n      const url = await getDownloadURL(item);\n      console.log(url);\n      return url;\n    }));\n    console.log(urls);\n    await updateImageBox(urls, houseId);\n  } catch (error) {\n    console.log('error', error);\n    return null;\n  }\n};\n\n//Fetching a particular room's data.\nexport const getRoomInfo = async houseId => {\n  try {\n    const roomCollectionRef = collection(db, 'roomData');\n    const roomDocRef = doc(roomCollectionRef, `${houseId}`);\n    const documentsSnapshot = await getDoc(roomDocRef);\n    if (documentsSnapshot.exists()) {\n      const documents = documentsSnapshot.data();\n      console.log('firebase', documents);\n      return documents;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n  ;\n};\n\n//fetching the room data to the front end..\n\nexport const roomsMapArray = async () => {\n  const collectionRef = collection(db, 'roomData');\n  const q = query(collectionRef);\n  const roomsSnapShot = await getDocs(q);\n  const roomMap = roomsSnapShot.docs.reduce((acc, snap) => {\n    const {\n      houseId,\n      features,\n      type,\n      roomDescription,\n      liked,\n      price,\n      washroom,\n      roomReviews,\n      imageBox,\n      isEmpty\n    } = snap.data();\n    if (isEmpty) {\n      acc[houseId] = {\n        houseId,\n        features,\n        type,\n        roomDescription,\n        liked,\n        price,\n        washroom,\n        roomReviews,\n        imageBox,\n        isEmpty\n      };\n    }\n    return acc;\n  }, {});\n  return roomMap;\n};\n//Display Array of Requests\nexport const viewRequests = async () => {\n  const collectionRef = collection(db, 'Requests');\n  const q = query(collectionRef);\n  const roomsSnapShot = await getDocs(q);\n  const roomMap = roomsSnapShot.docs.reduce((acc, snap) => {\n    const {\n      emailId\n    } = snap.data();\n    acc[emailId] = {\n      emailId\n    };\n    return acc;\n  }, {});\n  return roomMap;\n};\n\n//fetching indivudual request from db based on email id \nexport const individualRequests = async email => {\n  console.log(email);\n  try {\n    const collectionRef = collection(db, 'Requests');\n    const docRef = doc(collectionRef, `${email.email}`);\n    const docSnapShot = await getDoc(docRef);\n    if (docSnapShot.exists()) {\n      const data = docSnapShot.data();\n      console.log(data);\n      return data;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n//function to set data inside approved owner Admin\n\nexport const createApprovedAdmins = async admin => {\n  try {\n    const docRef = doc(db, 'approvedAdmins', `${admin.emailId}`);\n    await setDoc(docRef, admin);\n    console.log('setting of document is complete');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteRequests = async email => {\n  try {\n    const docRef = doc(db, 'Requests', `${email}`);\n    await deleteDoc(docRef);\n    console.log('request successfully removed');\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//merging houseId\nexport const mergeHouseId = async (email, id) => {\n  const collectionRef = doc(db, 'ownerAdmin', `${email}`);\n  console.log('running 1');\n  try {\n    await updateDoc(collectionRef, {\n      houseId: id\n    });\n    console.log('Merge operation completed successfully.');\n  } catch (error) {\n    console.error('Error merging field:', error);\n  }\n};\n\n//fetch owner individual document;\nexport const fetchOwnerInfo = async email => {\n  console.log(email);\n  try {\n    const collectionRef = collection(db, 'approvedAdmins');\n    const docRef = doc(collectionRef, `${email}`);\n    const docSnapShot = await getDoc(docRef);\n    if (docSnapShot.exists()) {\n      const data = docSnapShot.data();\n      console.log(data);\n      return data;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n//function to set data inside appropriate Apartments\nexport const setApartmentData = async data => {\n  console.log('hi its reaching here');\n  try {\n    const docRef = doc(db, `${data.houseId}`, `${data.houseId}_${data.roomNumber}`);\n    await setDoc(docRef, data);\n    console.log('setting of document is complete');\n  } catch (error) {\n    console.log(error);\n  }\n  ;\n};\n\n//function to upload images\n\nexport const roomsImgUpload = async (data, img) => {\n  try {\n    const folderRef = ref(storage, `${data.houseId}_${data.roomNumber}/`);\n    for (const i of img) {\n      const imgRef = ref(folderRef, i.name);\n      await uploadBytes(imgRef, i);\n      console.log('upload success');\n    }\n    ;\n  } catch (error) {\n    console.log(error);\n  }\n  ;\n};\nexport const uploadTenantAdhar = async (data, img) => {\n  try {\n    const folderRefI = ref(storage, 'tenantsDoc/');\n    const folderRefII = ref(folderRefI, `${data.houseId}_${data.roomNumber}/`);\n    for (const i of img) {\n      const imageNameRef = ref(folderRefII, i.name);\n      await uploadBytes(imageNameRef, i);\n      console.log('success');\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//function to fetch the rooms which have not been approved\nexport const unApprovedRooms = async () => {\n  const collectionRef = collection(db, 'RoomRequests');\n  const q = query(collectionRef);\n  const roomsSnapShot = await getDocs(q);\n  const roomMap = roomsSnapShot.docs.reduce((acc, snap) => {\n    const {\n      houseId,\n      roomNumber\n    } = snap.data();\n    acc[houseId] = {\n      houseId,\n      roomNumber\n    };\n    return acc;\n  }, {});\n  return roomMap;\n};\n\n//fetch adhar urls of tenants\n\nexport const tenantUrl = async data => {\n  console.log('here is data', data);\n  try {\n    const folderRef = ref(storage, 'tenantsDoc/');\n    const folderRefII = ref(folderRef, `${data.houseId}_${data.roomNumber}/`);\n    const list = await listAll(folderRefII);\n    const urls = await Promise.all(list.items.map(async item => {\n      const url = await getDownloadURL(item);\n      console.log('yo');\n      return url;\n    }));\n    console.log('yoII', urls);\n    await updateTenantAdharCard(urls, data);\n  } catch (error) {\n    console.log('error', error);\n    return null;\n  }\n};\n//function to update fetched image urls to imagebox\n\nexport const updateTenantAdharCard = async (url, docData) => {\n  const DocumentRef = doc(db, `${docData.houseId}`, `${docData.houseId}_${docData.roomNumber}`);\n  try {\n    await updateDoc(DocumentRef, {\n      'tenant_adhar': url\n    });\n    console.log('imageBox updated');\n  } catch (error) {\n    console.log('error updating document', error);\n  }\n};\n\n//fetch adhar urls of tenants\n\nexport const roomUrl = async data => {\n  console.log('here is data', data);\n  try {\n    const folderRefII = ref(storage, `${data.houseId}_${data.roomNumber}/`);\n    const list = await listAll(folderRefII);\n    const urls = await Promise.all(list.items.map(async item => {\n      const url = await getDownloadURL(item);\n      console.log('yo');\n      return url;\n    }));\n    console.log('yoII', urls);\n    await updateRoomUrls(urls, data);\n  } catch (error) {\n    console.log('error', error);\n    return null;\n  }\n};\n//function to update fetched image urls to imagebox\n\nexport const updateRoomUrls = async (url, docData) => {\n  const DocumentRef = doc(db, `${docData.houseId}`, `${docData.houseId}_${docData.roomNumber}`);\n  try {\n    await updateDoc(DocumentRef, {\n      'imagebox': url\n    });\n    console.log('imageBox updated');\n  } catch (error) {\n    console.log('error updating document', error);\n  }\n};\n\n//fetching individual document to send a request to admin\nexport const fetchDoc = async data => {\n  console.log(data);\n  try {\n    const docRef = doc(db, `${data.houseId}`, `${data.houseId}_${data.roomNumber}`);\n    const docSnapShot = await getDoc(docRef);\n    if (docSnapShot) {\n      const req = docSnapShot.data();\n      ;\n      await unApprovedRoomsRequest(req);\n      console.log('my data', req);\n      return req;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//function to upload the above document to the UnapprovedRooms\n\nexport const unApprovedRoomsRequest = async data => {\n  try {\n    const docRef = doc(db, 'RoomRequests', `${data.houseId}_${data.roomNumber}`);\n    await setDoc(docRef, data);\n    console.log('request successfully sent');\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//function to create unApprovedRoomDisplayRequests \nexport const roomRequests = async data => {\n  console.log('fetched document', data);\n  try {\n    const docRef = doc(db, 'UnapprovedRooms', `${data.houseId}_${data.roomNumber}`);\n    await uploadBytes(docRef, data);\n    console.log('request sent successfully');\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//funciton to fetch the details of individual room request inorder to display it to the admin\n\nexport const individualRoomRequest = async roomId => {\n  console.log(roomId);\n  try {\n    const collectionRef = collection(db, 'RoomRequests');\n    const docRef = doc(collectionRef, `${roomId.roomId}`);\n    const docSnapShot = await getDoc(docRef);\n    if (docSnapShot.exists()) {\n      const data = docSnapShot.data();\n      console.log(data);\n      return data;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//set document to the folder through which data is fetched in the front end;\n\nexport const uploadToRoomData = async (data, roomId) => {\n  try {\n    const docRef = doc(db, 'roomData', `${roomId.roomId}`);\n    const reqDocRef = doc(db, 'RoomRequests', `${roomId.roomId}`);\n    await setDoc(docRef, data);\n    console.log('request accept success');\n    await deleteDoc(reqDocRef);\n  } catch (error) {\n    console.log(error);\n  }\n  ;\n};\n//function to delete requests\nexport const deleteRequestsData = async roomId => {\n  try {\n    const docRef = doc(db, 'RoomRequets', `${roomId.roomId}`);\n    await deleteDoc(docRef);\n    console.log('rejection Successfull');\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//function to fetch the roomId list of a partiuclar houseOwner;\nexport const roomIdFetching = async houseId => {\n  console.log(houseId.houseId);\n  try {\n    const collectionRef = collection(db, `${houseId.houseId}`);\n    const q = query(collectionRef);\n    const roomsSnapShot = await getDocs(q);\n    console.log('entered the if block');\n    const roomMap = roomsSnapShot.docs.reduce((acc, snap) => {\n      const {\n        roomNumber\n      } = snap.data();\n      acc[roomNumber] = {\n        roomNumber\n      };\n      console.log(acc);\n      return acc;\n    }, {});\n    console.log(roomMap);\n    return roomMap;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//user Authentication sector\nconst auth = getAuth();\nexport const signUpUserWithEmailAndPassword = async (email, password) => {\n  try {\n    await createUserWithEmailAndPassword(auth, email, password);\n    console.log('user SignUp success');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const signInUserwithEmailAndPassword = async (email, password) => {\n  try {\n    const user = await signInWithEmailAndPassword(auth, email, password);\n    console.log(user);\n    return user;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//Building Custom Authentication\n// const auth = getAuth();\n\n// export const createAdminSignUp = async(email, password) => {\n//     try{\n//         const adminCredentials = await createUserWithEmailAndPassword(auth, email, password);\n//         const admin = adminCredentials.user;\n//         const id = admin.uid;\n//         console.log(id);\n//         console.log(\"adminUser creation success\", admin);\n//         const role = 'admin';\n//         await callCustomClaimsHandler(id, role);\n//     } catch(error) {\n//         console.log('error creating document', error);\n//     }\n// }\n\n// export const callCustomClaimsHandler = async(uid, role) => {\n//     try{\n//         await createCustomToken(uid, {role});\n//         console.log('custom user claims setting done');\n//     } catch(error){\n//         console.log(error);\n//     }\n// }","map":{"version":3,"names":["initializeApp","getDoc","setDoc","doc","getFirestore","collection","updateDoc","query","getDocs","deleteDoc","getStorage","ref","uploadBytes","getDownloadURL","listAll","getAuth","createUserWithEmailAndPassword","signInWithEmailAndPassword","getAnalytics","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","analytics","db","createRoomDocument","data","CollectionRef","DocumentRef","houseId","DocumentSnapShot","exists","createdAt","Date","error","console","log","updateImageBox","updatedData","roomName","updateIsEmpty","RoomDocumentRef","id","createRequestDocument","collectionRef","documentRef","emailId","uploadLegalDocument","img","email","adharRef","storage","folderRef","imageFile","creationRef","name","uploadLegalDocumentII","fetchAdharUrl","docRef","imageRef","imageList","urls","Promise","all","items","map","item","url","updateAdharUrl","adharUrls","adharCard","fetchHouseDocUrl","updateHouseDocUrl","houseDocUrl","houseDoc","uploadImages","imageFiles","storageRef","fileRef","fetchUrls","list","getRoomInfo","roomCollectionRef","roomDocRef","documentsSnapshot","documents","roomsMapArray","q","roomsSnapShot","roomMap","docs","reduce","acc","snap","features","type","roomDescription","liked","price","washroom","roomReviews","imageBox","isEmpty","viewRequests","individualRequests","docSnapShot","createApprovedAdmins","admin","deleteRequests","mergeHouseId","fetchOwnerInfo","setApartmentData","roomNumber","roomsImgUpload","i","imgRef","uploadTenantAdhar","folderRefI","folderRefII","imageNameRef","unApprovedRooms","tenantUrl","updateTenantAdharCard","docData","roomUrl","updateRoomUrls","fetchDoc","req","unApprovedRoomsRequest","roomRequests","individualRoomRequest","roomId","uploadToRoomData","reqDocRef","deleteRequestsData","roomIdFetching","auth","signUpUserWithEmailAndPassword","password","signInUserwithEmailAndPassword","user"],"sources":["C:/Users/nisch/Desktop/Rentzzz/Rentz555-v2/src/utils/firebase.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\n\r\nimport {  getDoc, setDoc, doc, getFirestore, collection, updateDoc, query, getDocs, deleteDoc}   from 'firebase/firestore';\r\nimport {getStorage, ref, uploadBytes, getDownloadURL, listAll } from 'firebase/storage';\r\n\r\nimport {getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword } from 'firebase/auth'\r\n\r\nimport { getAnalytics } from \"firebase/analytics\";\r\n\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDEbn57UVIaoPmT8C8NrV_3WMmIKs9R4YE\",\r\n  authDomain: \"rentz-555.firebaseapp.com\",\r\n  projectId: \"rentz-555\",\r\n  storageBucket: \"rentz-555.appspot.com\",\r\n  messagingSenderId: \"36444490901\",\r\n  appId: \"1:36444490901:web:9b54077949595de2b01f9c\",\r\n  measurementId: \"G-8MK34XN24L\"\r\n};\r\n\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst analytics = getAnalytics(app);\r\n\r\n const db = getFirestore();\r\n\r\n\r\n //initializing admin\r\n \r\n\r\n \r\n\r\n//creating room document;\r\nexport const createRoomDocument = async (data) => {\r\n    const CollectionRef =  collection(db, 'roomData');\r\n    const DocumentRef =  doc(CollectionRef, `${data.houseId}`)\r\n    const DocumentSnapShot = await getDoc(DocumentRef);\r\n\r\n    if(!DocumentSnapShot.exists()) {\r\n        const createdAt = new Date();\r\n        try {\r\n            await setDoc(DocumentRef, {\r\n                createdAt,\r\n                ...data\r\n            } )\r\n        } catch (error) {\r\n            console.log('error setting document', error);\r\n        }\r\n    }\r\n    return DocumentSnapShot;\r\n} \r\n\r\n export const updateImageBox = async (updatedData, roomName) => {\r\n     const DocumentRef = doc(db, 'roomData', `${roomName}`);\r\n     \r\n\r\n    try {\r\n        \r\n        await updateDoc(DocumentRef,{ 'imageBox' : updatedData });\r\n        console.log('imageBox updated')\r\n    } catch (error) {\r\n        console.log('error updating document', error);\r\n    }\r\n }\r\n\r\n export const updateIsEmpty = async (updatedData, roomName) => {\r\n    console.log(updatedData);\r\n    console.log(roomName);\r\n   \r\n    \r\n\r\n   try {\r\n    const RoomDocumentRef = doc(db, 'roomData', roomName.id);\r\n       await updateDoc(RoomDocumentRef,{ 'isEmpty' : updatedData });\r\n       console.log('this document will now be displyed or de-displayed according to what you choose');\r\n   } catch (error) {\r\n       console.log('error updating document', error);\r\n   }\r\n}\r\n\r\n//creating documents of all the requests of owners to do business with us;\r\nexport const createRequestDocument = async(data) => {\r\n    try{\r\n        const collectionRef = collection(db, 'Requests');\r\n        const documentRef = doc(collectionRef, `${data.emailId}`);\r\n\r\n       await setDoc(documentRef, data);\r\n       console.log('document Creation Success');\r\n            \r\n    } catch(error){\r\n        console.log(error);\r\n    };\r\n}\r\n\r\nexport const uploadLegalDocument = async(img, email) => {\r\n    try{\r\n        const adharRef = ref(storage, `request:${email}/`);\r\n        const folderRef = ref(adharRef,'adharCard' );\r\n        for(const imageFile of img){\r\n           const creationRef = ref(folderRef, imageFile.name);\r\n           await uploadBytes(creationRef, imageFile);\r\n           console.log('image updated');\r\n        }\r\n    } catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const uploadLegalDocumentII = async(img, email) => {\r\n    try{\r\n        const adharRef = ref(storage, `request:${email}/`);\r\n        const folderRef = ref(adharRef,'HouseDocument' );\r\n        for(const imageFile of img){\r\n           const creationRef = ref(folderRef, imageFile.name);\r\n           await uploadBytes(creationRef, imageFile);\r\n           console.log('image updated');\r\n        }\r\n    } catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n//fetching adhar card image from firebase storage to firestore\r\n\r\n\r\n\r\nexport const fetchAdharUrl = async (email) => {\r\n  try {\r\n    const docRef = ref(storage, `request:${email}/`);\r\n    const imageRef = ref(docRef, 'adharCard');\r\n    const imageList = await listAll(imageRef);\r\n    const urls = await Promise.all(\r\n      imageList.items.map(async (item) => {\r\n        const url = await getDownloadURL(item);\r\n        return url;\r\n      })\r\n    );\r\n    console.log(urls);\r\n    await updateAdharUrl(urls, email); // Update the Firestore document with the URLs\r\n    return urls;\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateAdharUrl = async (adharUrls, email) => {\r\n  try {\r\n    const docRef = doc(db, 'Requests', `${email}`)\r\n    await updateDoc(docRef, {adharCard: adharUrls})\r\n    console.log('adharCard Update Successful');\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n//fetching houseDocument from firebase storage to firestore\r\nexport const fetchHouseDocUrl = async(email) => {\r\n    try{\r\n        const docRef = ref(storage, `request:${email}/`);\r\n        const imageRef = ref(docRef, 'HouseDocument/' );\r\n        const imageList = await listAll(imageRef);\r\n        const urls = await Promise.all(imageList.items.map(async(item) => {\r\n            const url = await getDownloadURL(item);\r\n            return url;\r\n        }))\r\n      \r\n        await updateHouseDocUrl(urls, email)\r\n        return urls;\r\n\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n }\r\n\r\n export const updateHouseDocUrl = async(houseDocUrl, email) => {\r\n    try{\r\n        const docRef = doc(db, 'Requests', `${email}`);\r\n        await updateDoc(docRef, {houseDoc: houseDocUrl});\r\n        console.log('HouseDoc Update Successful');\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n }\r\n\r\n// storage functions\r\nexport const storage = getStorage(app);\r\n\r\n\r\nexport const uploadImages = async(imageFiles, houseId) => {\r\n    console.log(houseId);\r\n    const storageRef = ref(storage, `${houseId}/`);\r\n    try{\r\n        for(const imageFile of imageFiles) {\r\n            const fileRef = ref(storageRef, imageFile.name);\r\n            await uploadBytes(fileRef, imageFile);\r\n            console.log('image upload success');\r\n\r\n        };\r\n    } catch(error) {\r\n        console.log('error uploading the document');\r\n    };\r\n    return storageRef;\r\n}\r\n\r\n//fetching urls\r\nexport const fetchUrls = async (houseId) => {\r\n    try {\r\n        const folderRef = ref(storage, `${houseId}/`);\r\n        const list = await listAll(folderRef);\r\n        const urls = await Promise.all(list.items.map(async (item) => {\r\n            const url = await getDownloadURL(item);\r\n            console.log(url);\r\n            return url;\r\n        }));\r\n        console.log(urls);\r\n        await updateImageBox(urls, houseId);\r\n        } catch(error) {\r\n        console.log('error', error);\r\n        return null\r\n    }\r\n}\r\n\r\n//Fetching a particular room's data.\r\nexport const getRoomInfo = async (houseId) => {\r\n    \r\n    \r\n    try{\r\n        const roomCollectionRef = collection(db, 'roomData');\r\n        const roomDocRef = doc(roomCollectionRef, `${houseId}`);\r\n        \r\n       const documentsSnapshot = await getDoc(roomDocRef);\r\n       if(documentsSnapshot.exists()) {\r\n        const documents = documentsSnapshot.data();\r\n       \r\n        console.log('firebase',documents);\r\n        return documents;\r\n       }\r\n       \r\n    } catch(error) {\r\n        console.log(error);\r\n        \r\n    };\r\n  \r\n}\r\n\r\n//fetching the room data to the front end..\r\n\r\nexport const roomsMapArray = async () => {\r\n    const collectionRef = collection(db, 'roomData');\r\n    const q = query(collectionRef);\r\n    const roomsSnapShot = await getDocs(q);\r\n\r\n    const roomMap = roomsSnapShot.docs.reduce((acc, snap) => {\r\n        const { houseId, features, type, roomDescription, liked, price, washroom, roomReviews, imageBox, isEmpty} = snap.data();\r\n        if(isEmpty) {\r\n\r\n             acc[ houseId ] = { houseId, features, type, roomDescription, liked, price, washroom, roomReviews, imageBox, isEmpty};\r\n        } \r\n\r\n        return acc;\r\n\r\n    },{})\r\n    return roomMap;\r\n           \r\n            }\r\n//Display Array of Requests\r\nexport const viewRequests = async () => {\r\n    const collectionRef = collection(db, 'Requests');\r\n    const q = query(collectionRef);\r\n    const roomsSnapShot = await getDocs(q);\r\n\r\n    const roomMap = roomsSnapShot.docs.reduce((acc, snap) => {\r\n        const { emailId } = snap.data();\r\n         acc[ emailId ] = { emailId};\r\n    return acc;\r\n\r\n    },{})\r\n    return roomMap;\r\n           \r\n            }\r\n\r\n//fetching indivudual request from db based on email id \r\nexport const individualRequests = async (email) => {\r\n    console.log(email);\r\n    try{\r\n        const collectionRef = collection(db, 'Requests');\r\n        const docRef = doc(collectionRef, `${email.email}`);\r\n        const docSnapShot = await getDoc(docRef);\r\n        if(docSnapShot.exists()) {\r\n            const data = docSnapShot.data();\r\n            console.log(data);\r\n            return data;\r\n\r\n        }\r\n        \r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\n//function to set data inside approved owner Admin\r\n\r\nexport const createApprovedAdmins = async (admin) => {\r\n    try{\r\n        const docRef = doc(db, 'approvedAdmins', `${admin.emailId}`);\r\n        await setDoc(docRef, admin);\r\n        console.log('setting of document is complete');\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\nexport const deleteRequests = async (email) => {\r\n    try{\r\n       const docRef = doc(db, 'Requests', `${email}`);\r\n        await deleteDoc(docRef);\r\n        console.log('request successfully removed')\r\n        \r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n\r\n//merging houseId\r\nexport const mergeHouseId = async (email, id) => {\r\n    const collectionRef = doc(db, 'ownerAdmin', `${email}`);\r\n    console.log('running 1');\r\n    try {\r\n      await updateDoc(collectionRef, { houseId: id });\r\n      console.log('Merge operation completed successfully.');\r\n    } catch (error) {\r\n      console.error('Error merging field:', error);\r\n    }\r\n  };\r\n\r\n  //fetch owner individual document;\r\n  export const fetchOwnerInfo = async (email) => {\r\n    console.log(email);\r\n    try{\r\n        const collectionRef = collection(db, 'approvedAdmins');\r\n        const docRef = doc(collectionRef, `${email}`);\r\n        const docSnapShot = await getDoc(docRef);\r\n        if(docSnapShot.exists()) {\r\n            const data = docSnapShot.data();\r\n            console.log(data);\r\n            return data;\r\n\r\n        }\r\n        \r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n};\r\n//function to set data inside appropriate Apartments\r\nexport const setApartmentData = async (data) => {\r\n    console.log('hi its reaching here');\r\n    try{\r\n        const docRef = doc(db,`${data.houseId}`, `${data.houseId}_${data.roomNumber}`);\r\n        await setDoc(docRef, data);\r\n        console.log('setting of document is complete');\r\n    } catch(error) {\r\n        console.log(error);\r\n    };\r\n}\r\n\r\n//function to upload images\r\n\r\nexport const roomsImgUpload = async (data, img) => {\r\n    try{\r\n        const folderRef = ref(storage, `${data.houseId}_${data.roomNumber}/`);\r\n        for(const i of img) {\r\n            const imgRef = ref(folderRef, i.name);\r\n            await uploadBytes(imgRef, i);\r\n            \r\n            console.log('upload success');\r\n         };\r\n    } catch(error) {\r\n        console.log(error);\r\n    };\r\n} ;\r\n\r\nexport const uploadTenantAdhar = async( data, img ) => {\r\n    try{\r\n        const folderRefI = ref(storage, 'tenantsDoc/' );\r\n        const folderRefII = ref(folderRefI, `${data.houseId}_${data.roomNumber}/`);\r\n      \r\n        for(const i of img) {\r\n            const imageNameRef = ref(folderRefII, i.name);\r\n            await uploadBytes(imageNameRef, i);\r\n            console.log('success');\r\n         }\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n//function to fetch the rooms which have not been approved\r\nexport const unApprovedRooms = async () => {\r\n    const collectionRef = collection(db, 'RoomRequests');\r\n    const q = query(collectionRef);\r\n    const roomsSnapShot = await getDocs(q);\r\n\r\n    const roomMap = roomsSnapShot.docs.reduce((acc, snap) => {\r\n        const { houseId, roomNumber} = snap.data();\r\n    \r\n\r\n             acc[ houseId ] = { houseId, roomNumber};\r\n        \r\n\r\n        return acc;\r\n\r\n    },{})\r\n    return roomMap;\r\n           \r\n            }\r\n\r\n//fetch adhar urls of tenants\r\n\r\n export const tenantUrl = async(data) => {\r\n    console.log('here is data',data);\r\n    \r\n        try {\r\n            const folderRef = ref(storage, 'tenantsDoc/')\r\n            const folderRefII=ref(folderRef, `${data.houseId}_${data.roomNumber}/`);\r\n            const list = await listAll(folderRefII);\r\n            const urls = await Promise.all(list.items.map(async (item) => {\r\n                const url = await getDownloadURL(item);\r\n                console.log('yo');\r\n                return url;\r\n            }));\r\n            console.log('yoII',urls);\r\n            await updateTenantAdharCard(urls, data);\r\n            \r\n            } catch(error) {\r\n            console.log('error', error);\r\n            return null\r\n        }\r\n    }\r\n//function to update fetched image urls to imagebox\r\n\r\nexport const updateTenantAdharCard = async (url, docData) => {\r\n    const DocumentRef = doc(db,`${docData.houseId}`, `${docData.houseId}_${docData.roomNumber}`);\r\n    \r\n\r\n   try {\r\n       \r\n       await updateDoc(DocumentRef,{ 'tenant_adhar' : url });\r\n       console.log('imageBox updated')\r\n   } catch (error) {\r\n       console.log('error updating document', error);\r\n   }\r\n}\r\n\r\n//fetch adhar urls of tenants\r\n\r\nexport const roomUrl = async(data) => {\r\n    console.log('here is data',data);\r\n    \r\n        try {\r\n            \r\n            const folderRefII=ref(storage, `${data.houseId}_${data.roomNumber}/`);\r\n            const list = await listAll(folderRefII);\r\n            const urls = await Promise.all(list.items.map(async (item) => {\r\n                const url = await getDownloadURL(item);\r\n                console.log('yo');\r\n                return url;\r\n            }));\r\n            console.log('yoII',urls);\r\n            await updateRoomUrls(urls, data);\r\n            \r\n            } catch(error) {\r\n            console.log('error', error);\r\n            return null\r\n        }\r\n    }\r\n//function to update fetched image urls to imagebox\r\n\r\nexport const updateRoomUrls = async (url, docData) => {\r\n    const DocumentRef = doc(db,`${docData.houseId}`, `${docData.houseId}_${docData.roomNumber}`);\r\n    \r\n\r\n   try {\r\n       \r\n       await updateDoc(DocumentRef,{ 'imagebox' : url });\r\n       console.log('imageBox updated')\r\n   } catch (error) {\r\n       console.log('error updating document', error);\r\n   }\r\n}\r\n\r\n//fetching individual document to send a request to admin\r\n    export const fetchDoc = async (data) => {\r\n        console.log(data);\r\n        try{\r\n            const docRef = doc(db, `${data.houseId}`, `${data.houseId}_${data.roomNumber}`);\r\n            const docSnapShot = await getDoc(docRef);\r\n                if(docSnapShot) {\r\n               const req = docSnapShot.data();;\r\n                await unApprovedRoomsRequest(req);\r\n               console.log('my data', req);\r\n                    return req\r\n                }\r\n            \r\n           \r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n//function to upload the above document to the UnapprovedRooms\r\n\r\n    export const unApprovedRoomsRequest = async (data) => {\r\n        try {\r\n            const docRef = doc(db, 'RoomRequests', `${data.houseId}_${data.roomNumber}`)\r\n            await setDoc(docRef, data);\r\n            console.log('request successfully sent');\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n//function to create unApprovedRoomDisplayRequests \r\n   export const roomRequests = async(data) => {\r\n    console.log('fetched document', data);\r\n        try{\r\n            const docRef = doc(db, 'UnapprovedRooms', `${data.houseId}_${data.roomNumber}`);\r\n            await uploadBytes(docRef, data);\r\n            console.log('request sent successfully');\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n   };\r\n\r\n   //funciton to fetch the details of individual room request inorder to display it to the admin\r\n\r\nexport const individualRoomRequest = async (roomId) => {\r\n    console.log(roomId);\r\n    try{\r\n        const collectionRef = collection(db, 'RoomRequests');\r\n        const docRef = doc(collectionRef, `${roomId.roomId}`);\r\n        const docSnapShot = await getDoc(docRef);\r\n        if(docSnapShot.exists()) {\r\n            const data = docSnapShot.data();\r\n            console.log(data);\r\n            return data;\r\n\r\n        }\r\n        \r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n//set document to the folder through which data is fetched in the front end;\r\n\r\n    export const uploadToRoomData = async(data, roomId) => {\r\n        try {\r\n            const docRef = doc(db, 'roomData', `${roomId.roomId}`);\r\n            const reqDocRef = doc(db,'RoomRequests', `${roomId.roomId}`)\r\n            await setDoc(docRef, data);\r\n            console.log('request accept success');\r\n            await deleteDoc(reqDocRef);\r\n        } catch(error) {\r\n            console.log(error);\r\n        };\r\n    };\r\n//function to delete requests\r\n    export const deleteRequestsData = async (roomId) => {\r\n        try{\r\n            const docRef = doc(db, 'RoomRequets', `${roomId.roomId}`);\r\n            await deleteDoc(docRef);\r\n            console.log('rejection Successfull');\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n\r\n    };\r\n\r\n//function to fetch the roomId list of a partiuclar houseOwner;\r\nexport const roomIdFetching = async (houseId) => {\r\n    console.log(houseId.houseId);\r\n    try {\r\n      const collectionRef = collection(db, `${houseId.houseId}`);\r\n      const q = query(collectionRef);\r\n      const roomsSnapShot = await getDocs(q);\r\n  \r\n        console.log('entered the if block');\r\n        const roomMap = roomsSnapShot.docs.reduce((acc, snap) => {\r\n          const { roomNumber } = snap.data();\r\n          acc[roomNumber] = { roomNumber };\r\n          console.log(acc);\r\n          return acc;\r\n        }, {});\r\n        console.log(roomMap);\r\n        return roomMap;\r\n      \r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n\r\n//user Authentication sector\r\nconst auth = getAuth();\r\n\r\nexport const signUpUserWithEmailAndPassword = async(email, password) => {\r\n    try{\r\n        await createUserWithEmailAndPassword(auth, email, password);\r\n        console.log('user SignUp success');\r\n    } catch(error){\r\n        console.log(error);\r\n\r\n    }\r\n}\r\n\r\nexport const signInUserwithEmailAndPassword = async(email, password) => {\r\n    try{\r\n        const user = await signInWithEmailAndPassword(auth, email, password);\r\n        console.log(user);\r\n        return user;\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n//Building Custom Authentication\r\n// const auth = getAuth();\r\n\r\n// export const createAdminSignUp = async(email, password) => {\r\n//     try{\r\n//         const adminCredentials = await createUserWithEmailAndPassword(auth, email, password);\r\n//         const admin = adminCredentials.user;\r\n//         const id = admin.uid;\r\n//         console.log(id);\r\n//         console.log(\"adminUser creation success\", admin);\r\n//         const role = 'admin';\r\n//         await callCustomClaimsHandler(id, role);\r\n//     } catch(error) {\r\n//         console.log('error creating document', error);\r\n//     }\r\n// }\r\n\r\n// export const callCustomClaimsHandler = async(uid, role) => {\r\n//     try{\r\n//         await createCustomToken(uid, {role});\r\n//         console.log('custom user claims setting done');\r\n//     } catch(error){\r\n//         console.log(error);\r\n//     }\r\n// }\r\n        "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}