{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getDoc, setDoc, doc, getFirestore, collection, updateDoc, query, getDocs, deleteDoc, DocumentReference, arrayUnion } from 'firebase/firestore';\nimport { getStorage, ref, uploadBytes, getDownloadURL, listAll } from 'firebase/storage';\nimport { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, onAuthStateChanged, signOut } from 'firebase/auth';\nimport { getAnalytics, logEvent } from \"firebase/analytics\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDEbn57UVIaoPmT8C8NrV_3WMmIKs9R4YE\",\n  authDomain: \"rentz-555.firebaseapp.com\",\n  projectId: \"rentz-555\",\n  storageBucket: \"rentz-555.appspot.com\",\n  messagingSenderId: \"36444490901\",\n  appId: \"1:36444490901:web:9b54077949595de2b01f9c\",\n  measurementId: \"G-8MK34XN24L\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\nconst db = getFirestore();\nexport const eventData = (type, name) => {\n  if (type === 'filter:Rooms') {\n    logEvent(analytics, 'Room_filter', {\n      content_type: name,\n      content_id: type\n    });\n  }\n  if (type === 'filter:PG') {\n    logEvent(analytics, 'PG_filter', {\n      content_type: name,\n      content_id: type\n    });\n  }\n  if (type === 'filter:Appartments') {\n    logEvent(analytics, 'Appartment_filter', {\n      content_type: name,\n      content_id: type\n    });\n  }\n  if (type === 'filter:price' && name === '4000-5000') {\n    logEvent(analytics, 'Price_filter_4000-5000', {\n      content_type: name,\n      content_id: type\n    });\n  }\n  if (type === 'filter:price' && name === '5000-6000') {\n    logEvent(analytics, 'Price_filter_5000-6000', {\n      content_type: name,\n      content_id: type\n    });\n  }\n  if (type === 'filter:price' && name === '7000-8000') {\n    logEvent(analytics, 'Price_filter_7000-8000', {\n      content_type: name,\n      content_id: type\n    });\n  }\n  if (type === 'filter:bhk' && name === 'BHK1') {\n    logEvent(analytics, 'BHK_filter_1BHK', {\n      content_type: name,\n      content_id: type\n    });\n  }\n  if (type === 'filter:bhk' && name === 'BHK2') {\n    logEvent(analytics, 'BHK_filter_2BHK', {\n      content_type: name,\n      content_id: type\n    });\n  }\n  if (type === 'filter:bhk' && name === 'BHK3') {\n    logEvent(analytics, 'BHK_filter_3BHK', {\n      content_type: name,\n      content_id: type\n    });\n  }\n  if (type === 'selected_room') {\n    logEvent(analytics, 'select_room', {\n      content_type: name,\n      content_id: type\n    });\n  }\n};\n\n//initializing admin\n\nexport const sumbitApartmetRequest = async data => {\n  try {\n    const docRef = doc(db, 'apartmentRequests', `${data.emailId}`);\n    await setDoc(docRef, data);\n    console.log('data setting successful');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const addRequestDocumentToStorage = async data => {\n  console.log(data.adharDoc);\n  try {\n    const folderRef = ref(storage, 'requestsDocuments/');\n    const subFolderRef = ref(folderRef, `${data.emailId}:adharCard/`);\n    const subFolderRefII = ref(folderRef, `${data.emailId}:houseDoc/`);\n    for (let i of data.adharDoc) {\n      const imgRef = ref(subFolderRef, i.name);\n      await uploadBytes(imgRef, i);\n      const url = await getDownloadURL(imgRef);\n      data.adharDoc[data.adharDoc.indexOf(i)] = url;\n      console.log(data);\n    }\n    for (let i of data.houseDoc) {\n      const imgRef = ref(subFolderRefII, i.name);\n      await uploadBytes(imgRef, i);\n      const url = await getDownloadURL(imgRef);\n      data.houseDoc[data.houseDoc.indexOf(i)] = url;\n      console.log(data);\n    }\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//fetching data from firestore\n\nexport const fetchApartmentRequests = async () => {\n  try {\n    const docRef = collection(db, 'apartmentRequests');\n    const q = query(docRef);\n    const apartmentSnapShot = await getDocs(q);\n    // console.log(apartmentSnapShot);\n    // const requestMap = apartmentSnapShot.docs.reduce((acc, item) => {\n    //     const {fullName, emailId, location, phoneNumber, adharDoc, houseDoc} = item.data()\n    //     acc[ emailId ] = {fullName, emailId, location, phoneNumber, adharDoc, houseDoc}\n    //     return acc;\n    //      },{})\n    //      return requestMap\n\n    const data = apartmentSnapShot.docs.map(doc => {\n      return doc.data();\n    });\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//function to fetch the room data\nexport const fetchRooomData = async () => {\n  try {\n    const docRef = collection(db, 'roomData');\n    const q = query(docRef);\n    const roomSnapShot = await getDocs(q);\n    const data = roomSnapShot.docs.map(doc => {\n      return doc.data();\n    });\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const acceptApartmentRequests = async (data, houseId) => {\n  try {\n    const docRef = doc(db, 'OwnerUsers', `${data.emailId}`);\n    const docReqRef = doc(db, 'apartmentRequests', `${data.emailId}`);\n    await setDoc(docRef, data);\n    console.log('data successfully set');\n    await deleteDoc(docReqRef);\n    await updateDoc(docRef, {\n      houseId: houseId\n    });\n    console.log('request accepted');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const rejectApartmentRequests = async data => {\n  try {\n    const docRef = doc(db, 'apartmentRequests', `${data.emailId}`);\n    await deleteDoc(docRef);\n    console.log('request Rejected');\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//creating Apartment and creating room document;\nexport const createApartmentDocument = async data => {\n  const CollectionRef = collection(db, 'Apartments');\n  const DocumentRef = doc(CollectionRef, `${data.houseId}`);\n  const DocumentSnapShot = await getDoc(DocumentRef);\n  if (!DocumentSnapShot.exists()) {\n    const createdAt = new Date();\n    try {\n      await setDoc(DocumentRef, {\n        createdAt,\n        ...data\n      });\n    } catch (error) {\n      console.log('error setting document', error);\n    }\n  } else {\n    const existingData = DocumentSnapShot.data();\n    const updatedRooms = [...existingData.rooms, ...data.rooms];\n    try {\n      await updateDoc(DocumentRef, {\n        rooms: updatedRooms\n      });\n      console.log('Array updated');\n    } catch (error) {\n      console.log('Error updating document', error);\n    }\n  }\n  return DocumentSnapShot;\n};\n\n//uploading room images\nexport const addRequestRoomInfo = async data => {\n  console.log(data);\n  try {\n    const folderRef = ref(storage, 'roomImages/');\n    const updatedRooms = [];\n    for (let room of data.rooms) {\n      const subFolderRef = ref(folderRef, `${room.roomId}/`);\n      const roomImages = [];\n      for (let image of room.roomImageBox) {\n        const imgRef = ref(subFolderRef, image.name);\n        await uploadBytes(imgRef, image);\n        const url = await getDownloadURL(imgRef);\n        roomImages.push(url);\n      }\n      const updatedRoom = {\n        ...room,\n        roomImageBox: roomImages\n      };\n      updatedRooms.push(updatedRoom);\n    }\n    const updatedData = {\n      ...data,\n      rooms: updatedRooms\n    };\n    console.log(updatedData);\n    return updatedData;\n  } catch (error) {\n    console.log(error);\n  }\n};\n//authentication...\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email,\n      uid\n    } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        uid,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log('error creating the user', error.message);\n    }\n  }\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutUser = async () => {\n  console.log('reached here');\n  await signOut(auth);\n};\nexport const onAuthStateChangedListener = callback => onAuthStateChanged(auth, callback);\n\n//create documents to be displayed in the front end of our project\n\nexport const createRoomData = async data => {\n  try {\n    const obj = arrayToObject(data);\n    const docRef = doc(db, 'roomData', `${obj.roomId}`);\n    await setDoc(docRef, obj);\n    console.log(docRef);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport function arrayToObject(array) {\n  return array.reduce((obj, item) => {\n    const {\n      roomId,\n      roomDescription,\n      isEmpty,\n      roomImageBox,\n      price\n    } = item;\n    obj[roomId] = {\n      roomId,\n      roomDescription,\n      isEmpty,\n      roomImageBox,\n      price\n    };\n    return obj;\n  }, {});\n}\n\n//old code\nexport const updateImageBox = async (updatedData, roomName) => {\n  const DocumentRef = doc(db, 'roomData', `${roomName}`);\n  try {\n    await updateDoc(DocumentRef, {\n      'imageBox': updatedData\n    });\n    console.log('imageBox updated');\n  } catch (error) {\n    console.log('error updating document', error);\n  }\n};\nexport const updateIsEmpty = async (updatedData, roomName) => {\n  console.log(updatedData);\n  console.log(roomName);\n  try {\n    const RoomDocumentRef = doc(db, 'roomData', roomName.id);\n    await updateDoc(RoomDocumentRef, {\n      'isEmpty': updatedData\n    });\n    console.log('this document will now be displyed or de-displayed according to what you choose');\n  } catch (error) {\n    console.log('error updating document', error);\n  }\n};\n\n//creating documents of all the requests of owners to do business with us;\nexport const createRequestDocument = async data => {\n  try {\n    const collectionRef = collection(db, 'Requests');\n    const documentRef = doc(collectionRef, `${data.emailId}`);\n    await setDoc(documentRef, data);\n    console.log('document Creation Success');\n  } catch (error) {\n    console.log(error);\n  }\n  ;\n};\nexport const uploadLegalDocument = async (img, email) => {\n  try {\n    const adharRef = ref(storage, `request:${email}/`);\n    const folderRef = ref(adharRef, 'adharCard');\n    for (const imageFile of img) {\n      const creationRef = ref(folderRef, imageFile.name);\n      await uploadBytes(creationRef, imageFile);\n      console.log('image updated');\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const uploadLegalDocumentII = async (img, email) => {\n  try {\n    const adharRef = ref(storage, `request:${email}/`);\n    const folderRef = ref(adharRef, 'HouseDocument');\n    for (const imageFile of img) {\n      const creationRef = ref(folderRef, imageFile.name);\n      await uploadBytes(creationRef, imageFile);\n      console.log('image updated');\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//fetching adhar card image from firebase storage to firestore\n\nexport const fetchAdharUrl = async email => {\n  try {\n    const docRef = ref(storage, `request:${email}/`);\n    const imageRef = ref(docRef, 'adharCard');\n    const imageList = await listAll(imageRef);\n    const urls = await Promise.all(imageList.items.map(async item => {\n      const url = await getDownloadURL(item);\n      return url;\n    }));\n    console.log(urls);\n    await updateAdharUrl(urls, email); // Update the Firestore document with the URLs\n    return urls;\n  } catch (error) {\n    console.log(error);\n    throw error;\n  }\n};\nexport const updateAdharUrl = async (adharUrls, email) => {\n  try {\n    const docRef = doc(db, 'Requests', `${email}`);\n    await updateDoc(docRef, {\n      adharCard: adharUrls\n    });\n    console.log('adharCard Update Successful');\n  } catch (error) {\n    console.log(error);\n    throw error;\n  }\n};\n\n//fetching houseDocument from firebase storage to firestore\nexport const fetchHouseDocUrl = async email => {\n  try {\n    const docRef = ref(storage, `request:${email}/`);\n    const imageRef = ref(docRef, 'HouseDocument/');\n    const imageList = await listAll(imageRef);\n    const urls = await Promise.all(imageList.items.map(async item => {\n      const url = await getDownloadURL(item);\n      return url;\n    }));\n    await updateHouseDocUrl(urls, email);\n    return urls;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updateHouseDocUrl = async (houseDocUrl, email) => {\n  try {\n    const docRef = doc(db, 'Requests', `${email}`);\n    await updateDoc(docRef, {\n      houseDoc: houseDocUrl\n    });\n    console.log('HouseDoc Update Successful');\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// storage functions\nexport const storage = getStorage(app);\nexport const uploadImages = async (imageFiles, houseId) => {\n  console.log(houseId);\n  const storageRef = ref(storage, `${houseId}/`);\n  try {\n    for (const imageFile of imageFiles) {\n      const fileRef = ref(storageRef, imageFile.name);\n      await uploadBytes(fileRef, imageFile);\n      console.log('image upload success');\n    }\n    ;\n  } catch (error) {\n    console.log('error uploading the document');\n  }\n  ;\n  return storageRef;\n};\n\n//fetching urls\nexport const fetchUrls = async houseId => {\n  try {\n    const folderRef = ref(storage, `${houseId}/`);\n    const list = await listAll(folderRef);\n    const urls = await Promise.all(list.items.map(async item => {\n      const url = await getDownloadURL(item);\n      console.log(url);\n      return url;\n    }));\n    console.log(urls);\n    await updateImageBox(urls, houseId);\n  } catch (error) {\n    console.log('error', error);\n    return null;\n  }\n};\n\n//Fetching a particular room's data.\nexport const getRoomInfo = async houseId => {\n  try {\n    const roomCollectionRef = collection(db, 'roomData');\n    const roomDocRef = doc(roomCollectionRef, `${houseId}`);\n    const documentsSnapshot = await getDoc(roomDocRef);\n    if (documentsSnapshot.exists()) {\n      const documents = documentsSnapshot.data();\n      console.log('firebase', documents);\n      return documents;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n  ;\n};\n\n//fetching the room data to the front end..\n\nexport const roomsMapArray = async () => {\n  const collectionRef = collection(db, 'roomData');\n  const q = query(collectionRef);\n  const roomsSnapShot = await getDocs(q);\n  const roomMap = roomsSnapShot.docs.reduce((acc, snap) => {\n    const {\n      houseId,\n      features,\n      type,\n      roomDescription,\n      liked,\n      price,\n      washroom,\n      roomReviews,\n      imageBox,\n      isEmpty\n    } = snap.data();\n    if (isEmpty) {\n      acc[houseId] = {\n        houseId,\n        features,\n        type,\n        roomDescription,\n        liked,\n        price,\n        washroom,\n        roomReviews,\n        imageBox,\n        isEmpty\n      };\n    }\n    return acc;\n  }, {});\n  return roomMap;\n};\n//Display Array of Requests\nexport const viewRequests = async () => {\n  const collectionRef = collection(db, 'apartmentRequests');\n  const q = query(collectionRef);\n  const roomsSnapShot = await getDocs(q);\n  const roomMap = roomsSnapShot.docs.reduce((acc, snap) => {\n    const {\n      emailId\n    } = snap.data();\n    acc[emailId] = {\n      emailId\n    };\n    return acc;\n  }, {});\n  return roomMap;\n};\n\n//fetching indivudual request from db based on email id \nexport const individualRequests = async email => {\n  console.log(email);\n  try {\n    const collectionRef = collection(db, 'Requests');\n    const docRef = doc(collectionRef, `${email.email}`);\n    const docSnapShot = await getDoc(docRef);\n    if (docSnapShot.exists()) {\n      const data = docSnapShot.data();\n      console.log(data);\n      return data;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n//function to set data inside approved owner Admin\n\nexport const createApprovedAdmins = async admin => {\n  try {\n    const docRef = doc(db, 'approvedAdmins', `${admin.emailId}`);\n    await setDoc(docRef, admin);\n    console.log('setting of document is complete');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteRequests = async email => {\n  try {\n    const docRef = doc(db, 'Requests', `${email}`);\n    await deleteDoc(docRef);\n    console.log('request successfully removed');\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//merging houseId\nexport const mergeHouseId = async (email, id) => {\n  const collectionRef = doc(db, 'ownerAdmin', `${email}`);\n  console.log('running 1');\n  try {\n    await updateDoc(collectionRef, {\n      houseId: id\n    });\n    console.log('Merge operation completed successfully.');\n  } catch (error) {\n    console.error('Error merging field:', error);\n  }\n};\n\n//fetch owner individual document;\nexport const fetchOwnerInfo = async email => {\n  console.log(email);\n  try {\n    const collectionRef = collection(db, 'approvedAdmins');\n    const docRef = doc(collectionRef, `${email}`);\n    const docSnapShot = await getDoc(docRef);\n    if (docSnapShot.exists()) {\n      const data = docSnapShot.data();\n      console.log(data);\n      return data;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n//function to set data inside appropriate Apartments\nexport const setApartmentData = async data => {\n  console.log('hi its reaching here');\n  try {\n    const docRef = doc(db, `${data.houseId}`, `${data.houseId}_${data.roomNumber}`);\n    await setDoc(docRef, data);\n    console.log('setting of document is complete');\n  } catch (error) {\n    console.log(error);\n  }\n  ;\n};\n\n//function to upload images\n\nexport const roomsImgUpload = async (data, img) => {\n  try {\n    const folderRef = ref(storage, `${data.houseId}_${data.roomNumber}/`);\n    for (const i of img) {\n      const imgRef = ref(folderRef, i.name);\n      await uploadBytes(imgRef, i);\n      console.log('upload success');\n    }\n    ;\n  } catch (error) {\n    console.log(error);\n  }\n  ;\n};\nexport const uploadTenantAdhar = async (data, img) => {\n  try {\n    const folderRefI = ref(storage, 'tenantsDoc/');\n    const folderRefII = ref(folderRefI, `${data.houseId}_${data.roomNumber}/`);\n    for (const i of img) {\n      const imageNameRef = ref(folderRefII, i.name);\n      await uploadBytes(imageNameRef, i);\n      console.log('success');\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//function to fetch the rooms which have not been approved\nexport const unApprovedRooms = async () => {\n  const collectionRef = collection(db, 'RoomRequests');\n  const q = query(collectionRef);\n  const roomsSnapShot = await getDocs(q);\n  const roomMap = roomsSnapShot.docs.reduce((acc, snap) => {\n    const {\n      houseId,\n      roomNumber\n    } = snap.data();\n    acc[houseId] = {\n      houseId,\n      roomNumber\n    };\n    return acc;\n  }, {});\n  return roomMap;\n};\n\n//fetch adhar urls of tenants\n\nexport const tenantUrl = async data => {\n  console.log('here is data', data);\n  try {\n    const folderRef = ref(storage, 'tenantsDoc/');\n    const folderRefII = ref(folderRef, `${data.houseId}_${data.roomNumber}/`);\n    const list = await listAll(folderRefII);\n    const urls = await Promise.all(list.items.map(async item => {\n      const url = await getDownloadURL(item);\n      console.log('yo');\n      return url;\n    }));\n    console.log('yoII', urls);\n    await updateTenantAdharCard(urls, data);\n  } catch (error) {\n    console.log('error', error);\n    return null;\n  }\n};\n//function to update fetched image urls to imagebox\n\nexport const updateTenantAdharCard = async (url, docData) => {\n  const DocumentRef = doc(db, `${docData.houseId}`, `${docData.houseId}_${docData.roomNumber}`);\n  try {\n    await updateDoc(DocumentRef, {\n      'tenant_adhar': url\n    });\n    console.log('imageBox updated');\n  } catch (error) {\n    console.log('error updating document', error);\n  }\n};\n\n//fetch adhar urls of tenants\n\nexport const roomUrl = async data => {\n  console.log('here is data', data);\n  try {\n    const folderRefII = ref(storage, `${data.houseId}_${data.roomNumber}/`);\n    const list = await listAll(folderRefII);\n    const urls = await Promise.all(list.items.map(async item => {\n      const url = await getDownloadURL(item);\n      console.log('yo');\n      return url;\n    }));\n    console.log('yoII', urls);\n    await updateRoomUrls(urls, data);\n  } catch (error) {\n    console.log('error', error);\n    return null;\n  }\n};\n//function to update fetched image urls to imagebox\n\nexport const updateRoomUrls = async (url, docData) => {\n  const DocumentRef = doc(db, `${docData.houseId}`, `${docData.houseId}_${docData.roomNumber}`);\n  try {\n    await updateDoc(DocumentRef, {\n      'imagebox': url\n    });\n    console.log('imageBox updated');\n  } catch (error) {\n    console.log('error updating document', error);\n  }\n};\n\n//fetching individual document to send a request to admin\nexport const fetchDoc = async data => {\n  console.log(data);\n  try {\n    const docRef = doc(db, `${data.houseId}`, `${data.houseId}_${data.roomNumber}`);\n    const docSnapShot = await getDoc(docRef);\n    if (docSnapShot) {\n      const req = docSnapShot.data();\n      ;\n      await unApprovedRoomsRequest(req);\n      console.log('my data', req);\n      return req;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//function to upload the above document to the UnapprovedRooms\n\nexport const unApprovedRoomsRequest = async data => {\n  try {\n    const docRef = doc(db, 'RoomRequests', `${data.houseId}_${data.roomNumber}`);\n    await setDoc(docRef, data);\n    console.log('request successfully sent');\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//function to create unApprovedRoomDisplayRequests \nexport const roomRequests = async data => {\n  console.log('fetched document', data);\n  try {\n    const docRef = doc(db, 'UnapprovedRooms', `${data.houseId}_${data.roomNumber}`);\n    await uploadBytes(docRef, data);\n    console.log('request sent successfully');\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//funciton to fetch the details of individual room request inorder to display it to the admin\n\nexport const individualRoomRequest = async roomId => {\n  console.log(roomId);\n  try {\n    const collectionRef = collection(db, 'RoomRequests');\n    const docRef = doc(collectionRef, `${roomId.roomId}`);\n    const docSnapShot = await getDoc(docRef);\n    if (docSnapShot.exists()) {\n      const data = docSnapShot.data();\n      console.log(data);\n      return data;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//set document to the folder through which data is fetched in the front end;\n\nexport const uploadToRoomData = async (data, roomId) => {\n  try {\n    const docRef = doc(db, 'roomData', `${roomId.roomId}`);\n    const reqDocRef = doc(db, 'RoomRequests', `${roomId.roomId}`);\n    await setDoc(docRef, data);\n    console.log('request accept success');\n    await deleteDoc(reqDocRef);\n  } catch (error) {\n    console.log(error);\n  }\n  ;\n};\n//function to delete requests\nexport const deleteRequestsData = async roomId => {\n  try {\n    const docRef = doc(db, 'RoomRequets', `${roomId.roomId}`);\n    await deleteDoc(docRef);\n    console.log('rejection Successfull');\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//function to fetch the roomId list of a partiuclar houseOwner;\nexport const roomIdFetching = async houseId => {\n  console.log(houseId.houseId);\n  try {\n    const collectionRef = collection(db, `${houseId.houseId}`);\n    const q = query(collectionRef);\n    const roomsSnapShot = await getDocs(q);\n    console.log('entered the if block');\n    const roomMap = roomsSnapShot.docs.reduce((acc, snap) => {\n      const {\n        roomNumber\n      } = snap.data();\n      acc[roomNumber] = {\n        roomNumber\n      };\n      console.log(acc);\n      return acc;\n    }, {});\n    console.log(roomMap);\n    return roomMap;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//user Authentication sector\nconst auth = getAuth();\nexport const signUpUserWithEmailAndPassword = async (email, password) => {\n  try {\n    await createUserWithEmailAndPassword(auth, email, password);\n    console.log('user SignUp success');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const signInUserwithEmailAndPassword = async (email, password) => {\n  try {\n    const user = await signInWithEmailAndPassword(auth, email, password);\n    console.log(user);\n    return user;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//Building Custom Authentication\n// const auth = getAuth();\n\n// export const createAdminSignUp = async(email, password) => {\n//     try{\n//         const adminCredentials = await createUserWithEmailAndPassword(auth, email, password);\n//         const admin = adminCredentials.user;\n//         const id = admin.uid;\n//         console.log(id);\n//         console.log(\"adminUser creation success\", admin);\n//         const role = 'admin';\n//         await callCustomClaimsHandler(id, role);\n//     } catch(error) {\n//         console.log('error creating document', error);\n//     }\n// }\n\n// export const callCustomClaimsHandler = async(uid, role) => {\n//     try{\n//         await createCustomToken(uid, {role});\n//         console.log('custom user claims setting done');\n//     } catch(error){\n//         console.log(error);\n//     }\n// }","map":{"version":3,"names":["initializeApp","getDoc","setDoc","doc","getFirestore","collection","updateDoc","query","getDocs","deleteDoc","DocumentReference","arrayUnion","getStorage","ref","uploadBytes","getDownloadURL","listAll","getAuth","createUserWithEmailAndPassword","signInWithEmailAndPassword","onAuthStateChanged","signOut","getAnalytics","logEvent","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","analytics","db","eventData","type","name","content_type","content_id","sumbitApartmetRequest","data","docRef","emailId","console","log","error","addRequestDocumentToStorage","adharDoc","folderRef","storage","subFolderRef","subFolderRefII","i","imgRef","url","indexOf","houseDoc","fetchApartmentRequests","q","apartmentSnapShot","docs","map","fetchRooomData","roomSnapShot","acceptApartmentRequests","houseId","docReqRef","rejectApartmentRequests","createApartmentDocument","CollectionRef","DocumentRef","DocumentSnapShot","exists","createdAt","Date","existingData","updatedRooms","rooms","addRequestRoomInfo","room","roomId","roomImages","image","roomImageBox","push","updatedRoom","updatedData","createUserDocumentFromAuth","userAuth","additionalInformation","userDocRef","uid","userSnapshot","displayName","email","message","createAuthUserWithEmailAndPassword","password","auth","signInAuthUserWithEmailAndPassword","signOutUser","onAuthStateChangedListener","callback","createRoomData","obj","arrayToObject","array","reduce","item","roomDescription","isEmpty","price","updateImageBox","roomName","updateIsEmpty","RoomDocumentRef","id","createRequestDocument","collectionRef","documentRef","uploadLegalDocument","img","adharRef","imageFile","creationRef","uploadLegalDocumentII","fetchAdharUrl","imageRef","imageList","urls","Promise","all","items","updateAdharUrl","adharUrls","adharCard","fetchHouseDocUrl","updateHouseDocUrl","houseDocUrl","uploadImages","imageFiles","storageRef","fileRef","fetchUrls","list","getRoomInfo","roomCollectionRef","roomDocRef","documentsSnapshot","documents","roomsMapArray","roomsSnapShot","roomMap","acc","snap","features","liked","washroom","roomReviews","imageBox","viewRequests","individualRequests","docSnapShot","createApprovedAdmins","admin","deleteRequests","mergeHouseId","fetchOwnerInfo","setApartmentData","roomNumber","roomsImgUpload","uploadTenantAdhar","folderRefI","folderRefII","imageNameRef","unApprovedRooms","tenantUrl","updateTenantAdharCard","docData","roomUrl","updateRoomUrls","fetchDoc","req","unApprovedRoomsRequest","roomRequests","individualRoomRequest","uploadToRoomData","reqDocRef","deleteRequestsData","roomIdFetching","signUpUserWithEmailAndPassword","signInUserwithEmailAndPassword","user"],"sources":["C:/Users/nisch/Desktop/Rentz(analytics)/Rentz555-v2/src/utils/firebase.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\n\r\nimport {  getDoc, setDoc, doc, getFirestore, collection, updateDoc, query, getDocs, deleteDoc, DocumentReference, arrayUnion}   from 'firebase/firestore';\r\nimport {getStorage, ref, uploadBytes, getDownloadURL, listAll } from 'firebase/storage';\r\n\r\nimport {getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, onAuthStateChanged, signOut } from 'firebase/auth'\r\n\r\nimport { getAnalytics, logEvent } from \"firebase/analytics\";\r\n\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDEbn57UVIaoPmT8C8NrV_3WMmIKs9R4YE\",\r\n  authDomain: \"rentz-555.firebaseapp.com\",\r\n  projectId: \"rentz-555\",\r\n  storageBucket: \"rentz-555.appspot.com\",\r\n  messagingSenderId: \"36444490901\",\r\n  appId: \"1:36444490901:web:9b54077949595de2b01f9c\",\r\n  measurementId: \"G-8MK34XN24L\"\r\n};\r\n\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst analytics = getAnalytics(app);\r\n\r\n const db = getFirestore();\r\n\r\n export const eventData = (type,name) =>{\r\n\r\n    if(type === 'filter:Rooms'){\r\n\r\n        logEvent(analytics, 'Room_filter', {\r\n            content_type: name,\r\n            content_id: type\r\n          });\r\n    }\r\n    if(type === 'filter:PG'){\r\n\r\n        logEvent(analytics, 'PG_filter', {\r\n            content_type: name,\r\n            content_id: type\r\n          });\r\n    }\r\n    if(type === 'filter:Appartments'){\r\n\r\n        logEvent(analytics, 'Appartment_filter', {\r\n            content_type: name,\r\n            content_id: type\r\n          });\r\n    }\r\n    if(type === 'filter:price' && name === '4000-5000'){\r\n\r\n        logEvent(analytics, 'Price_filter_4000-5000', {\r\n            content_type: name,\r\n            content_id: type\r\n          });\r\n    }\r\n    if(type === 'filter:price' && name === '5000-6000'){\r\n\r\n        logEvent(analytics, 'Price_filter_5000-6000', {\r\n            content_type: name,\r\n            content_id: type\r\n          });\r\n    }\r\n    if(type === 'filter:price' && name === '7000-8000'){\r\n\r\n        logEvent(analytics, 'Price_filter_7000-8000', {\r\n            content_type: name,\r\n            content_id: type\r\n          });\r\n    }\r\n    if(type === 'filter:bhk' && name === 'BHK1'){\r\n\r\n        logEvent(analytics, 'BHK_filter_1BHK', {\r\n            content_type: name,\r\n            content_id: type\r\n          });\r\n    }\r\n    if(type === 'filter:bhk' && name === 'BHK2'){\r\n\r\n        logEvent(analytics, 'BHK_filter_2BHK', {\r\n            content_type: name,\r\n            content_id: type\r\n          });\r\n    }\r\n    if(type === 'filter:bhk' && name === 'BHK3'){\r\n\r\n        logEvent(analytics, 'BHK_filter_3BHK', {\r\n            content_type: name,\r\n            content_id: type\r\n          });\r\n    }\r\n    if(type === 'selected_room'){\r\n        logEvent(analytics, 'select_room', {\r\n            content_type: name,\r\n            content_id: type\r\n          });\r\n    }\r\n} \r\n\r\n //initializing admin\r\n \r\n export const sumbitApartmetRequest = async(data) => {\r\n    try{\r\n        const docRef = doc(db, 'apartmentRequests', `${data.emailId}`)\r\n        await setDoc(docRef, data);\r\n        console.log('data setting successful');\r\n    }catch(error) {\r\n        console.log(error);\r\n    }\r\n }\r\n\r\n export const addRequestDocumentToStorage = async(data) => {\r\n    console.log(data.adharDoc)\r\n    try{\r\n\r\n        const folderRef = ref(storage, 'requestsDocuments/');\r\n        const subFolderRef = ref(folderRef, `${data.emailId}:adharCard/`);\r\n        const subFolderRefII = ref(folderRef,`${data.emailId}:houseDoc/`);\r\n        for(let i of data.adharDoc) {\r\n            const imgRef = ref(subFolderRef, i.name);\r\n            await uploadBytes(imgRef, i)\r\n            const url = await getDownloadURL(imgRef);\r\n            data.adharDoc[data.adharDoc.indexOf(i)] = url\r\n            console.log(data);\r\n        }\r\n        for(let i of data.houseDoc) {\r\n            const imgRef = ref(subFolderRefII, i.name);\r\n            await uploadBytes(imgRef, i)\r\n            const url = await getDownloadURL(imgRef);\r\n            data.houseDoc[data.houseDoc.indexOf(i)] = url\r\n            console.log(data);   \r\n        }\r\n        return data\r\n\r\n    }catch(error) {\r\n        console.log(error);\r\n    }\r\n }\r\n\r\n \r\n//fetching data from firestore\r\n\r\n export const fetchApartmentRequests = async() => {\r\n    try{\r\n        const docRef = collection(db, 'apartmentRequests');\r\n        const q = query(docRef);\r\n        const apartmentSnapShot = await getDocs(q);\r\n        // console.log(apartmentSnapShot);\r\n        // const requestMap = apartmentSnapShot.docs.reduce((acc, item) => {\r\n        //     const {fullName, emailId, location, phoneNumber, adharDoc, houseDoc} = item.data()\r\n        //     acc[ emailId ] = {fullName, emailId, location, phoneNumber, adharDoc, houseDoc}\r\n        //     return acc;\r\n        //      },{})\r\n        //      return requestMap\r\n\r\n        const data = apartmentSnapShot.docs.map(doc => {return doc.data()})\r\n        return data\r\n    \r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n }\r\n\r\n //function to fetch the room data\r\n export const fetchRooomData = async() => {\r\n    try{\r\n        const docRef = collection(db, 'roomData');\r\n        const q = query(docRef);\r\n        const roomSnapShot = await getDocs(q);\r\n\r\n        const data = roomSnapShot.docs.map(doc => {return doc.data()})\r\n        return data;\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n }\r\n\r\n\r\n\r\n \r\n export const acceptApartmentRequests = async(data, houseId) => {\r\n    try{\r\n        const docRef = doc(db, 'OwnerUsers', `${data.emailId}`);\r\n        const docReqRef = doc(db, 'apartmentRequests', `${data.emailId}`)\r\n        await  setDoc(docRef, data);\r\n        console.log('data successfully set');\r\n        await deleteDoc(docReqRef);\r\n        await updateDoc(docRef,{houseId: houseId});\r\n        console.log('request accepted');\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n }\r\n\r\n export const rejectApartmentRequests = async(data) => {\r\n    try{\r\n        const docRef = doc(db, 'apartmentRequests', `${data.emailId}`)\r\n        await deleteDoc(docRef);\r\n        console.log('request Rejected');\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n    \r\n } \r\n\r\n \r\n \r\n\r\n//creating Apartment and creating room document;\r\nexport const createApartmentDocument = async (data) => {\r\n    const CollectionRef =  collection(db, 'Apartments');\r\n    const DocumentRef =  doc(CollectionRef, `${data.houseId}`)\r\n    \r\n    const DocumentSnapShot = await getDoc(DocumentRef);\r\n\r\n    if(!DocumentSnapShot.exists()) {\r\n        const createdAt = new Date();\r\n        try {\r\n            await setDoc(DocumentRef, {\r\n                createdAt,\r\n                ...data\r\n            } )\r\n        } catch (error) {\r\n            console.log('error setting document', error);\r\n        }\r\n    } else {\r\n        const existingData = DocumentSnapShot.data();\r\n        const updatedRooms = [...existingData.rooms, ...data.rooms];\r\n    \r\n        try {\r\n          await updateDoc(DocumentRef, {\r\n            rooms: updatedRooms\r\n          });\r\n          console.log('Array updated');\r\n        } catch (error) {\r\n          console.log('Error updating document', error);\r\n        }\r\n      }\r\n    \r\n      return DocumentSnapShot;\r\n    };\r\n\r\n\r\n//uploading room images\r\nexport const addRequestRoomInfo = async (data) => {\r\n    console.log(data);\r\n    try {\r\n      const folderRef = ref(storage, 'roomImages/');\r\n      const updatedRooms = [];\r\n  \r\n      for (let room of data.rooms) {\r\n        const subFolderRef = ref(folderRef, `${room.roomId}/`);\r\n        const roomImages = [];\r\n  \r\n        for (let image of room.roomImageBox) {\r\n          const imgRef = ref(subFolderRef, image.name);\r\n          await uploadBytes(imgRef, image);\r\n          const url = await getDownloadURL(imgRef);\r\n          roomImages.push(url);\r\n        }\r\n  \r\n        const updatedRoom = {\r\n          ...room,\r\n          roomImageBox: roomImages,\r\n        };\r\n        updatedRooms.push(updatedRoom);\r\n      }\r\n  \r\n      const updatedData = {\r\n        ...data,\r\n        rooms: updatedRooms,\r\n      };\r\n  \r\n      console.log(updatedData);\r\n      return updatedData;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n//authentication...\r\n export const createUserDocumentFromAuth = async (\r\n    userAuth,\r\n    additionalInformation = {}\r\n  ) => {\r\n    if (!userAuth) return;\r\n  \r\n    const userDocRef = doc(db, 'users', userAuth.uid);\r\n  \r\n    const userSnapshot = await getDoc(userDocRef);\r\n  \r\n    if (!userSnapshot.exists()) {\r\n      const { displayName, email, uid } = userAuth;\r\n      const createdAt = new Date();\r\n  \r\n      try {\r\n        await setDoc(userDocRef, {\r\n          displayName,\r\n          email,\r\n          uid,\r\n          createdAt,\r\n          ...additionalInformation,\r\n        });\r\n      } catch (error) {\r\n        console.log('error creating the user', error.message);\r\n      }\r\n    }\r\n  \r\n    return userDocRef;\r\n  };\r\n  \r\n  export const createAuthUserWithEmailAndPassword = async (email, password) => {\r\n    if (!email || !password) return;\r\n  \r\n    return await createUserWithEmailAndPassword(auth, email, password);\r\n  };\r\n  \r\n  export const signInAuthUserWithEmailAndPassword = async (email, password) => {\r\n    if (!email || !password) return;\r\n  \r\n    return await signInWithEmailAndPassword(auth, email, password);\r\n  };\r\n  \r\n  export const signOutUser = async () => {\r\n    console.log('reached here')\r\n    await signOut(auth); \r\n}\r\n  \r\n  export const onAuthStateChangedListener = (callback) =>\r\n    onAuthStateChanged(auth, callback);\r\n  \r\n//create documents to be displayed in the front end of our project\r\n\r\n    export const createRoomData = async(data) => {\r\n        try{\r\n           \r\n        const obj = arrayToObject(data);\r\n        const docRef = doc(db, 'roomData', `${obj.roomId}`) \r\n            await setDoc(docRef, obj);\r\n            console.log(docRef);\r\n        }catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n \r\n  export function arrayToObject(array) {\r\n        return array.reduce((obj, item) => {\r\n            const { roomId, roomDescription, isEmpty, roomImageBox, price } = item;\r\n          obj[roomId ] = {roomId, roomDescription, isEmpty, roomImageBox, price}\r\n          return obj;\r\n        }, {});\r\n      }\r\n\r\n\r\n//old code\r\n export const updateImageBox = async (updatedData, roomName) => {\r\n     const DocumentRef = doc(db, 'roomData', `${roomName}`);\r\n     \r\n\r\n    try {\r\n        \r\n        await updateDoc(DocumentRef,{ 'imageBox' : updatedData });\r\n        console.log('imageBox updated')\r\n    } catch (error) {\r\n        console.log('error updating document', error);\r\n    }\r\n }\r\n\r\n export const updateIsEmpty = async (updatedData, roomName) => {\r\n    console.log(updatedData);\r\n    console.log(roomName);\r\n   \r\n    \r\n\r\n   try {\r\n    const RoomDocumentRef = doc(db, 'roomData', roomName.id);\r\n       await updateDoc(RoomDocumentRef,{ 'isEmpty' : updatedData });\r\n       console.log('this document will now be displyed or de-displayed according to what you choose');\r\n   } catch (error) {\r\n       console.log('error updating document', error);\r\n   }\r\n}\r\n\r\n//creating documents of all the requests of owners to do business with us;\r\nexport const createRequestDocument = async(data) => {\r\n    try{\r\n        const collectionRef = collection(db, 'Requests');\r\n        const documentRef = doc(collectionRef, `${data.emailId}`);\r\n\r\n       await setDoc(documentRef, data);\r\n       console.log('document Creation Success');\r\n            \r\n    } catch(error){\r\n        console.log(error);\r\n    };\r\n}\r\n\r\nexport const uploadLegalDocument = async(img, email) => {\r\n    try{\r\n        const adharRef = ref(storage, `request:${email}/`);\r\n        const folderRef = ref(adharRef,'adharCard' );\r\n        for(const imageFile of img){\r\n           const creationRef = ref(folderRef, imageFile.name);\r\n           await uploadBytes(creationRef, imageFile);\r\n           console.log('image updated');\r\n        }\r\n    } catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const uploadLegalDocumentII = async(img, email) => {\r\n    try{\r\n        const adharRef = ref(storage, `request:${email}/`);\r\n        const folderRef = ref(adharRef,'HouseDocument' );\r\n        for(const imageFile of img){\r\n           const creationRef = ref(folderRef, imageFile.name);\r\n           await uploadBytes(creationRef, imageFile);\r\n           console.log('image updated');\r\n        }\r\n    } catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n//fetching adhar card image from firebase storage to firestore\r\n\r\n\r\n\r\nexport const fetchAdharUrl = async (email) => {\r\n  try {\r\n    const docRef = ref(storage, `request:${email}/`);\r\n    const imageRef = ref(docRef, 'adharCard');\r\n    const imageList = await listAll(imageRef);\r\n    const urls = await Promise.all(\r\n      imageList.items.map(async (item) => {\r\n        const url = await getDownloadURL(item);\r\n        return url;\r\n      })\r\n    );\r\n    console.log(urls);\r\n    await updateAdharUrl(urls, email); // Update the Firestore document with the URLs\r\n    return urls;\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateAdharUrl = async (adharUrls, email) => {\r\n  try {\r\n    const docRef = doc(db, 'Requests', `${email}`)\r\n    await updateDoc(docRef, {adharCard: adharUrls})\r\n    console.log('adharCard Update Successful');\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n//fetching houseDocument from firebase storage to firestore\r\nexport const fetchHouseDocUrl = async(email) => {\r\n    try{\r\n        const docRef = ref(storage, `request:${email}/`);\r\n        const imageRef = ref(docRef, 'HouseDocument/' );\r\n        const imageList = await listAll(imageRef);\r\n        const urls = await Promise.all(imageList.items.map(async(item) => {\r\n            const url = await getDownloadURL(item);\r\n            return url;\r\n        }))\r\n      \r\n        await updateHouseDocUrl(urls, email)\r\n        return urls;\r\n\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n }\r\n\r\n export const updateHouseDocUrl = async(houseDocUrl, email) => {\r\n    try{\r\n        const docRef = doc(db, 'Requests', `${email}`);\r\n        await updateDoc(docRef, {houseDoc: houseDocUrl});\r\n        console.log('HouseDoc Update Successful');\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n }\r\n\r\n// storage functions\r\nexport const storage = getStorage(app);\r\n\r\n\r\nexport const uploadImages = async(imageFiles, houseId) => {\r\n    console.log(houseId);\r\n    const storageRef = ref(storage, `${houseId}/`);\r\n    try{\r\n        for(const imageFile of imageFiles) {\r\n            const fileRef = ref(storageRef, imageFile.name);\r\n            await uploadBytes(fileRef, imageFile);\r\n            console.log('image upload success');\r\n\r\n        };\r\n    } catch(error) {\r\n        console.log('error uploading the document');\r\n    };\r\n    return storageRef;\r\n}\r\n\r\n//fetching urls\r\nexport const fetchUrls = async (houseId) => {\r\n    try {\r\n        const folderRef = ref(storage, `${houseId}/`);\r\n        const list = await listAll(folderRef);\r\n        const urls = await Promise.all(list.items.map(async (item) => {\r\n            const url = await getDownloadURL(item);\r\n            console.log(url);\r\n            return url;\r\n        }));\r\n        console.log(urls);\r\n        await updateImageBox(urls, houseId);\r\n        } catch(error) {\r\n        console.log('error', error);\r\n        return null\r\n    }\r\n}\r\n\r\n//Fetching a particular room's data.\r\nexport const getRoomInfo = async (houseId) => {\r\n    \r\n    \r\n    try{\r\n        const roomCollectionRef = collection(db, 'roomData');\r\n        const roomDocRef = doc(roomCollectionRef, `${houseId}`);\r\n        \r\n       const documentsSnapshot = await getDoc(roomDocRef);\r\n       if(documentsSnapshot.exists()) {\r\n        const documents = documentsSnapshot.data();\r\n       \r\n        console.log('firebase',documents);\r\n        return documents;\r\n       }\r\n       \r\n    } catch(error) {\r\n        console.log(error);\r\n        \r\n    };\r\n  \r\n}\r\n\r\n//fetching the room data to the front end..\r\n\r\nexport const roomsMapArray = async () => {\r\n    const collectionRef = collection(db, 'roomData');\r\n    const q = query(collectionRef);\r\n    const roomsSnapShot = await getDocs(q);\r\n\r\n    const roomMap = roomsSnapShot.docs.reduce((acc, snap) => {\r\n        const { houseId, features, type, roomDescription, liked, price, washroom, roomReviews, imageBox, isEmpty} = snap.data();\r\n        if(isEmpty) {\r\n\r\n             acc[ houseId ] = { houseId, features, type, roomDescription, liked, price, washroom, roomReviews, imageBox, isEmpty};\r\n        } \r\n\r\n        return acc;\r\n\r\n    },{})\r\n    return roomMap;\r\n           \r\n            }\r\n//Display Array of Requests\r\nexport const viewRequests = async () => {\r\n    const collectionRef = collection(db, 'apartmentRequests');\r\n    const q = query(collectionRef);\r\n    const roomsSnapShot = await getDocs(q);\r\n\r\n    const roomMap = roomsSnapShot.docs.reduce((acc, snap) => {\r\n        const { emailId } = snap.data();\r\n         acc[ emailId ] = { emailId};\r\n    return acc;\r\n\r\n    },{})\r\n    return roomMap;\r\n           \r\n            }\r\n\r\n//fetching indivudual request from db based on email id \r\nexport const individualRequests = async (email) => {\r\n    console.log(email);\r\n    try{\r\n        const collectionRef = collection(db, 'Requests');\r\n        const docRef = doc(collectionRef, `${email.email}`);\r\n        const docSnapShot = await getDoc(docRef);\r\n        if(docSnapShot.exists()) {\r\n            const data = docSnapShot.data();\r\n            console.log(data);\r\n            return data;\r\n\r\n        }\r\n        \r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\n//function to set data inside approved owner Admin\r\n\r\nexport const createApprovedAdmins = async (admin) => {\r\n    try{\r\n        const docRef = doc(db, 'approvedAdmins', `${admin.emailId}`);\r\n        await setDoc(docRef, admin);\r\n        console.log('setting of document is complete');\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\nexport const deleteRequests = async (email) => {\r\n    try{\r\n       const docRef = doc(db, 'Requests', `${email}`);\r\n        await deleteDoc(docRef);\r\n        console.log('request successfully removed')\r\n        \r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n\r\n//merging houseId\r\nexport const mergeHouseId = async (email, id) => {\r\n    const collectionRef = doc(db, 'ownerAdmin', `${email}`);\r\n    console.log('running 1');\r\n    try {\r\n      await updateDoc(collectionRef, { houseId: id });\r\n      console.log('Merge operation completed successfully.');\r\n    } catch (error) {\r\n      console.error('Error merging field:', error);\r\n    }\r\n  };\r\n\r\n  //fetch owner individual document;\r\n  export const fetchOwnerInfo = async (email) => {\r\n    console.log(email);\r\n    try{\r\n        const collectionRef = collection(db, 'approvedAdmins');\r\n        const docRef = doc(collectionRef, `${email}`);\r\n        const docSnapShot = await getDoc(docRef);\r\n        if(docSnapShot.exists()) {\r\n            const data = docSnapShot.data();\r\n            console.log(data);\r\n            return data;\r\n\r\n        }\r\n        \r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n};\r\n//function to set data inside appropriate Apartments\r\nexport const setApartmentData = async (data) => {\r\n    console.log('hi its reaching here');\r\n    try{\r\n        const docRef = doc(db,`${data.houseId}`, `${data.houseId}_${data.roomNumber}`);\r\n        await setDoc(docRef, data);\r\n        console.log('setting of document is complete');\r\n    } catch(error) {\r\n        console.log(error);\r\n    };\r\n}\r\n\r\n//function to upload images\r\n\r\nexport const roomsImgUpload = async (data, img) => {\r\n    try{\r\n        const folderRef = ref(storage, `${data.houseId}_${data.roomNumber}/`);\r\n        for(const i of img) {\r\n            const imgRef = ref(folderRef, i.name);\r\n            await uploadBytes(imgRef, i);\r\n            \r\n            console.log('upload success');\r\n         };\r\n    } catch(error) {\r\n        console.log(error);\r\n    };\r\n} ;\r\n\r\nexport const uploadTenantAdhar = async( data, img ) => {\r\n    try{\r\n        const folderRefI = ref(storage, 'tenantsDoc/' );\r\n        const folderRefII = ref(folderRefI, `${data.houseId}_${data.roomNumber}/`);\r\n      \r\n        for(const i of img) {\r\n            const imageNameRef = ref(folderRefII, i.name);\r\n            await uploadBytes(imageNameRef, i);\r\n            console.log('success');\r\n         }\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n//function to fetch the rooms which have not been approved\r\nexport const unApprovedRooms = async () => {\r\n    const collectionRef = collection(db, 'RoomRequests');\r\n    const q = query(collectionRef);\r\n    const roomsSnapShot = await getDocs(q);\r\n\r\n    const roomMap = roomsSnapShot.docs.reduce((acc, snap) => {\r\n        const { houseId, roomNumber} = snap.data();\r\n    \r\n\r\n             acc[ houseId ] = { houseId, roomNumber};\r\n        \r\n\r\n        return acc;\r\n\r\n    },{})\r\n    return roomMap;\r\n           \r\n            }\r\n\r\n//fetch adhar urls of tenants\r\n\r\n export const tenantUrl = async(data) => {\r\n    console.log('here is data',data);\r\n    \r\n        try {\r\n            const folderRef = ref(storage, 'tenantsDoc/')\r\n            const folderRefII=ref(folderRef, `${data.houseId}_${data.roomNumber}/`);\r\n            const list = await listAll(folderRefII);\r\n            const urls = await Promise.all(list.items.map(async (item) => {\r\n                const url = await getDownloadURL(item);\r\n                console.log('yo');\r\n                return url;\r\n            }));\r\n            console.log('yoII',urls);\r\n            await updateTenantAdharCard(urls, data);\r\n            \r\n            } catch(error) {\r\n            console.log('error', error);\r\n            return null\r\n        }\r\n    }\r\n//function to update fetched image urls to imagebox\r\n\r\nexport const updateTenantAdharCard = async (url, docData) => {\r\n    const DocumentRef = doc(db,`${docData.houseId}`, `${docData.houseId}_${docData.roomNumber}`);\r\n    \r\n\r\n   try {\r\n       \r\n       await updateDoc(DocumentRef,{ 'tenant_adhar' : url });\r\n       console.log('imageBox updated')\r\n   } catch (error) {\r\n       console.log('error updating document', error);\r\n   }\r\n}\r\n\r\n//fetch adhar urls of tenants\r\n\r\nexport const roomUrl = async(data) => {\r\n    console.log('here is data',data);\r\n    \r\n        try {\r\n            \r\n            const folderRefII=ref(storage, `${data.houseId}_${data.roomNumber}/`);\r\n            const list = await listAll(folderRefII);\r\n            const urls = await Promise.all(list.items.map(async (item) => {\r\n                const url = await getDownloadURL(item);\r\n                console.log('yo');\r\n                return url;\r\n            }));\r\n            console.log('yoII',urls);\r\n            await updateRoomUrls(urls, data);\r\n            \r\n            } catch(error) {\r\n            console.log('error', error);\r\n            return null\r\n        }\r\n    }\r\n//function to update fetched image urls to imagebox\r\n\r\nexport const updateRoomUrls = async (url, docData) => {\r\n    const DocumentRef = doc(db,`${docData.houseId}`, `${docData.houseId}_${docData.roomNumber}`);\r\n    \r\n\r\n   try {\r\n       \r\n       await updateDoc(DocumentRef,{ 'imagebox' : url });\r\n       console.log('imageBox updated')\r\n   } catch (error) {\r\n       console.log('error updating document', error);\r\n   }\r\n}\r\n\r\n//fetching individual document to send a request to admin\r\n    export const fetchDoc = async (data) => {\r\n        console.log(data);\r\n        try{\r\n            const docRef = doc(db, `${data.houseId}`, `${data.houseId}_${data.roomNumber}`);\r\n            const docSnapShot = await getDoc(docRef);\r\n                if(docSnapShot) {\r\n               const req = docSnapShot.data();;\r\n                await unApprovedRoomsRequest(req);\r\n               console.log('my data', req);\r\n                    return req\r\n                }\r\n            \r\n           \r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n//function to upload the above document to the UnapprovedRooms\r\n\r\n    export const unApprovedRoomsRequest = async (data) => {\r\n        try {\r\n            const docRef = doc(db, 'RoomRequests', `${data.houseId}_${data.roomNumber}`)\r\n            await setDoc(docRef, data);\r\n            console.log('request successfully sent');\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n//function to create unApprovedRoomDisplayRequests \r\n   export const roomRequests = async(data) => {\r\n    console.log('fetched document', data);\r\n        try{\r\n            const docRef = doc(db, 'UnapprovedRooms', `${data.houseId}_${data.roomNumber}`);\r\n            await uploadBytes(docRef, data);\r\n            console.log('request sent successfully');\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n   };\r\n\r\n   //funciton to fetch the details of individual room request inorder to display it to the admin\r\n\r\nexport const individualRoomRequest = async (roomId) => {\r\n    console.log(roomId);\r\n    try{\r\n        const collectionRef = collection(db, 'RoomRequests');\r\n        const docRef = doc(collectionRef, `${roomId.roomId}`);\r\n        const docSnapShot = await getDoc(docRef);\r\n        if(docSnapShot.exists()) {\r\n            const data = docSnapShot.data();\r\n            console.log(data);\r\n            return data;\r\n\r\n        }\r\n        \r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n//set document to the folder through which data is fetched in the front end;\r\n\r\n    export const uploadToRoomData = async(data, roomId) => {\r\n        try {\r\n            const docRef = doc(db, 'roomData', `${roomId.roomId}`);\r\n            const reqDocRef = doc(db,'RoomRequests', `${roomId.roomId}`)\r\n            await setDoc(docRef, data);\r\n            console.log('request accept success');\r\n            await deleteDoc(reqDocRef);\r\n        } catch(error) {\r\n            console.log(error);\r\n        };\r\n    };\r\n//function to delete requests\r\n    export const deleteRequestsData = async (roomId) => {\r\n        try{\r\n            const docRef = doc(db, 'RoomRequets', `${roomId.roomId}`);\r\n            await deleteDoc(docRef);\r\n            console.log('rejection Successfull');\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n\r\n    };\r\n\r\n//function to fetch the roomId list of a partiuclar houseOwner;\r\nexport const roomIdFetching = async (houseId) => {\r\n    console.log(houseId.houseId);\r\n    try {\r\n      const collectionRef = collection(db, `${houseId.houseId}`);\r\n      const q = query(collectionRef);\r\n      const roomsSnapShot = await getDocs(q);\r\n  \r\n        console.log('entered the if block');\r\n        const roomMap = roomsSnapShot.docs.reduce((acc, snap) => {\r\n          const { roomNumber } = snap.data();\r\n          acc[roomNumber] = { roomNumber };\r\n          console.log(acc);\r\n          return acc;\r\n        }, {});\r\n        console.log(roomMap);\r\n        return roomMap;\r\n      \r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n\r\n//user Authentication sector\r\nconst auth = getAuth();\r\n\r\nexport const signUpUserWithEmailAndPassword = async(email, password) => {\r\n    try{\r\n        await createUserWithEmailAndPassword(auth, email, password);\r\n        console.log('user SignUp success');\r\n    } catch(error){\r\n        console.log(error);\r\n\r\n    }\r\n}\r\n\r\nexport const signInUserwithEmailAndPassword = async(email, password) => {\r\n    try{\r\n        const user = await signInWithEmailAndPassword(auth, email, password);\r\n        console.log(user);\r\n        return user;\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n//Building Custom Authentication\r\n// const auth = getAuth();\r\n\r\n// export const createAdminSignUp = async(email, password) => {\r\n//     try{\r\n//         const adminCredentials = await createUserWithEmailAndPassword(auth, email, password);\r\n//         const admin = adminCredentials.user;\r\n//         const id = admin.uid;\r\n//         console.log(id);\r\n//         console.log(\"adminUser creation success\", admin);\r\n//         const role = 'admin';\r\n//         await callCustomClaimsHandler(id, role);\r\n//     } catch(error) {\r\n//         console.log('error creating document', error);\r\n//     }\r\n// }\r\n\r\n// export const callCustomClaimsHandler = async(uid, role) => {\r\n//     try{\r\n//         await createCustomToken(uid, {role});\r\n//         console.log('custom user claims setting done');\r\n//     } catch(error){\r\n//         console.log(error);\r\n//     }\r\n// }\r\n        "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}