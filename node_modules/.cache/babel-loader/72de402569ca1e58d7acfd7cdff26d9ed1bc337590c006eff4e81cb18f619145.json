{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getDoc, setDoc, doc, getFirestore, collection, updateDoc, query, getDocs, deleteDoc } from 'firebase/firestore';\nimport { getStorage, ref, uploadBytes, getDownloadURL, listAll } from 'firebase/storage';\nimport { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword } from 'firebase/auth';\nimport { getAnalytics, logEvent } from \"firebase/analytics\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDEbn57UVIaoPmT8C8NrV_3WMmIKs9R4YE\",\n  authDomain: \"rentz-555.firebaseapp.com\",\n  projectId: \"rentz-555\",\n  storageBucket: \"rentz-555.appspot.com\",\n  messagingSenderId: \"36444490901\",\n  appId: \"1:36444490901:web:9b54077949595de2b01f9c\",\n  measurementId: \"G-8MK34XN24L\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\nconst db = getFirestore();\nexport const eventData = (type, name) => {\n  if (type === 'filter') {\n    logEvent(analytics, 'filter', {\n      content_type: name,\n      content_id: type\n    });\n  }\n  if (type === 'selected_room') {\n    logEvent(analytics, 'select_room', {\n      content_type: name,\n      content_id: type\n    });\n  }\n};\n\n//initializing admin\n\n//creating room document;\nexport const createRoomDocument = async data => {\n  const CollectionRef = collection(db, 'roomData');\n  const DocumentRef = doc(CollectionRef, `${data.houseId}`);\n  const DocumentSnapShot = await getDoc(DocumentRef);\n  if (!DocumentSnapShot.exists()) {\n    const createdAt = new Date();\n    try {\n      await setDoc(DocumentRef, {\n        createdAt,\n        ...data\n      });\n    } catch (error) {\n      console.log('error setting document', error);\n    }\n  }\n  return DocumentSnapShot;\n};\nexport const updateImageBox = async (updatedData, roomName) => {\n  const DocumentRef = doc(db, 'roomData', `${roomName}`);\n  try {\n    await updateDoc(DocumentRef, {\n      'imageBox': updatedData\n    });\n    console.log('imageBox updated');\n  } catch (error) {\n    console.log('error updating document', error);\n  }\n};\nexport const updateIsEmpty = async (updatedData, roomName) => {\n  console.log(updatedData);\n  console.log(roomName);\n  try {\n    const RoomDocumentRef = doc(db, 'roomData', roomName.id);\n    await updateDoc(RoomDocumentRef, {\n      'isEmpty': updatedData\n    });\n    console.log('this document will now be displyed or de-displayed according to what you choose');\n  } catch (error) {\n    console.log('error updating document', error);\n  }\n};\n\n//creating documents of all the requests of owners to do business with us;\nexport const createRequestDocument = async data => {\n  try {\n    const collectionRef = collection(db, 'Requests');\n    const documentRef = doc(collectionRef, `${data.emailId}`);\n    await setDoc(documentRef, data);\n    console.log('document Creation Success');\n  } catch (error) {\n    console.log(error);\n  }\n  ;\n};\nexport const uploadLegalDocument = async (img, email) => {\n  try {\n    const adharRef = ref(storage, `request:${email}/`);\n    const folderRef = ref(adharRef, 'adharCard');\n    for (const imageFile of img) {\n      const creationRef = ref(folderRef, imageFile.name);\n      await uploadBytes(creationRef, imageFile);\n      console.log('image updated');\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const uploadLegalDocumentII = async (img, email) => {\n  try {\n    const adharRef = ref(storage, `request:${email}/`);\n    const folderRef = ref(adharRef, 'HouseDocument');\n    for (const imageFile of img) {\n      const creationRef = ref(folderRef, imageFile.name);\n      await uploadBytes(creationRef, imageFile);\n      console.log('image updated');\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//fetching adhar card image from firebase storage to firestore\n\nexport const fetchAdharUrl = async email => {\n  try {\n    const docRef = ref(storage, `request:${email}/`);\n    const imageRef = ref(docRef, 'adharCard');\n    const imageList = await listAll(imageRef);\n    const urls = await Promise.all(imageList.items.map(async item => {\n      const url = await getDownloadURL(item);\n      return url;\n    }));\n    console.log(urls);\n    await updateAdharUrl(urls, email); // Update the Firestore document with the URLs\n    return urls;\n  } catch (error) {\n    console.log(error);\n    throw error;\n  }\n};\nexport const updateAdharUrl = async (adharUrls, email) => {\n  try {\n    const docRef = doc(db, 'Requests', `${email}`);\n    await updateDoc(docRef, {\n      adharCard: adharUrls\n    });\n    console.log('adharCard Update Successful');\n  } catch (error) {\n    console.log(error);\n    throw error;\n  }\n};\n\n//fetching houseDocument from firebase storage to firestore\nexport const fetchHouseDocUrl = async email => {\n  try {\n    const docRef = ref(storage, `request:${email}/`);\n    const imageRef = ref(docRef, 'HouseDocument/');\n    const imageList = await listAll(imageRef);\n    const urls = await Promise.all(imageList.items.map(async item => {\n      const url = await getDownloadURL(item);\n      return url;\n    }));\n    await updateHouseDocUrl(urls, email);\n    return urls;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updateHouseDocUrl = async (houseDocUrl, email) => {\n  try {\n    const docRef = doc(db, 'Requests', `${email}`);\n    await updateDoc(docRef, {\n      houseDoc: houseDocUrl\n    });\n    console.log('HouseDoc Update Successful');\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// storage functions\nexport const storage = getStorage(app);\nexport const uploadImages = async (imageFiles, houseId) => {\n  console.log(houseId);\n  const storageRef = ref(storage, `${houseId}/`);\n  try {\n    for (const imageFile of imageFiles) {\n      const fileRef = ref(storageRef, imageFile.name);\n      await uploadBytes(fileRef, imageFile);\n      console.log('image upload success');\n    }\n    ;\n  } catch (error) {\n    console.log('error uploading the document');\n  }\n  ;\n  return storageRef;\n};\n\n//fetching urls\nexport const fetchUrls = async houseId => {\n  try {\n    const folderRef = ref(storage, `${houseId}/`);\n    const list = await listAll(folderRef);\n    const urls = await Promise.all(list.items.map(async item => {\n      const url = await getDownloadURL(item);\n      console.log(url);\n      return url;\n    }));\n    console.log(urls);\n    await updateImageBox(urls, houseId);\n  } catch (error) {\n    console.log('error', error);\n    return null;\n  }\n};\n\n//Fetching a particular room's data.\nexport const getRoomInfo = async houseId => {\n  try {\n    const roomCollectionRef = collection(db, 'roomData');\n    const roomDocRef = doc(roomCollectionRef, `${houseId}`);\n    const documentsSnapshot = await getDoc(roomDocRef);\n    if (documentsSnapshot.exists()) {\n      const documents = documentsSnapshot.data();\n      console.log('firebase', documents);\n      return documents;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n  ;\n};\n\n//fetching the room data to the front end..\n\nexport const roomsMapArray = async () => {\n  const collectionRef = collection(db, 'roomData');\n  const q = query(collectionRef);\n  const roomsSnapShot = await getDocs(q);\n  const roomMap = roomsSnapShot.docs.reduce((acc, snap) => {\n    const {\n      houseId,\n      features,\n      type,\n      roomDescription,\n      liked,\n      price,\n      washroom,\n      roomReviews,\n      imageBox,\n      isEmpty\n    } = snap.data();\n    if (isEmpty) {\n      acc[houseId] = {\n        houseId,\n        features,\n        type,\n        roomDescription,\n        liked,\n        price,\n        washroom,\n        roomReviews,\n        imageBox,\n        isEmpty\n      };\n    }\n    return acc;\n  }, {});\n  return roomMap;\n};\n//Display Array of Requests\nexport const viewRequests = async () => {\n  const collectionRef = collection(db, 'Requests');\n  const q = query(collectionRef);\n  const roomsSnapShot = await getDocs(q);\n  const roomMap = roomsSnapShot.docs.reduce((acc, snap) => {\n    const {\n      emailId\n    } = snap.data();\n    acc[emailId] = {\n      emailId\n    };\n    return acc;\n  }, {});\n  return roomMap;\n};\n\n//fetching indivudual request from db based on email id \nexport const individualRequests = async email => {\n  console.log(email);\n  try {\n    const collectionRef = collection(db, 'Requests');\n    const docRef = doc(collectionRef, `${email.email}`);\n    const docSnapShot = await getDoc(docRef);\n    if (docSnapShot.exists()) {\n      const data = docSnapShot.data();\n      console.log(data);\n      return data;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n//function to set data inside approved owner Admin\n\nexport const createApprovedAdmins = async admin => {\n  try {\n    const docRef = doc(db, 'approvedAdmins', `${admin.emailId}`);\n    await setDoc(docRef, admin);\n    console.log('setting of document is complete');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteRequests = async email => {\n  try {\n    const docRef = doc(db, 'Requests', `${email}`);\n    await deleteDoc(docRef);\n    console.log('request successfully removed');\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//merging houseId\nexport const mergeHouseId = async (email, id) => {\n  const collectionRef = doc(db, 'ownerAdmin', `${email}`);\n  console.log('running 1');\n  try {\n    await updateDoc(collectionRef, {\n      houseId: id\n    });\n    console.log('Merge operation completed successfully.');\n  } catch (error) {\n    console.error('Error merging field:', error);\n  }\n};\n\n//fetch owner individual document;\nexport const fetchOwnerInfo = async email => {\n  console.log(email);\n  try {\n    const collectionRef = collection(db, 'approvedAdmins');\n    const docRef = doc(collectionRef, `${email}`);\n    const docSnapShot = await getDoc(docRef);\n    if (docSnapShot.exists()) {\n      const data = docSnapShot.data();\n      console.log(data);\n      return data;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n//function to set data inside appropriate Apartments\nexport const setApartmentData = async data => {\n  console.log('hi its reaching here');\n  try {\n    const docRef = doc(db, `${data.houseId}`, `${data.houseId}_${data.roomNumber}`);\n    await setDoc(docRef, data);\n    console.log('setting of document is complete');\n  } catch (error) {\n    console.log(error);\n  }\n  ;\n};\n\n//function to upload images\n\nexport const roomsImgUpload = async (data, img) => {\n  try {\n    const folderRef = ref(storage, `${data.houseId}_${data.roomNumber}/`);\n    for (const i of img) {\n      const imgRef = ref(folderRef, i.name);\n      await uploadBytes(imgRef, i);\n      console.log('upload success');\n    }\n    ;\n  } catch (error) {\n    console.log(error);\n  }\n  ;\n};\nexport const uploadTenantAdhar = async (data, img) => {\n  try {\n    const folderRefI = ref(storage, 'tenantsDoc/');\n    const folderRefII = ref(folderRefI, `${data.houseId}_${data.roomNumber}/`);\n    for (const i of img) {\n      const imageNameRef = ref(folderRefII, i.name);\n      await uploadBytes(imageNameRef, i);\n      console.log('success');\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//function to fetch the rooms which have not been approved\nexport const unApprovedRooms = async () => {\n  const collectionRef = collection(db, 'RoomRequests');\n  const q = query(collectionRef);\n  const roomsSnapShot = await getDocs(q);\n  const roomMap = roomsSnapShot.docs.reduce((acc, snap) => {\n    const {\n      houseId,\n      roomNumber\n    } = snap.data();\n    acc[houseId] = {\n      houseId,\n      roomNumber\n    };\n    return acc;\n  }, {});\n  return roomMap;\n};\n\n//fetch adhar urls of tenants\n\nexport const tenantUrl = async data => {\n  console.log('here is data', data);\n  try {\n    const folderRef = ref(storage, 'tenantsDoc/');\n    const folderRefII = ref(folderRef, `${data.houseId}_${data.roomNumber}/`);\n    const list = await listAll(folderRefII);\n    const urls = await Promise.all(list.items.map(async item => {\n      const url = await getDownloadURL(item);\n      console.log('yo');\n      return url;\n    }));\n    console.log('yoII', urls);\n    await updateTenantAdharCard(urls, data);\n  } catch (error) {\n    console.log('error', error);\n    return null;\n  }\n};\n//function to update fetched image urls to imagebox\n\nexport const updateTenantAdharCard = async (url, docData) => {\n  const DocumentRef = doc(db, `${docData.houseId}`, `${docData.houseId}_${docData.roomNumber}`);\n  try {\n    await updateDoc(DocumentRef, {\n      'tenant_adhar': url\n    });\n    console.log('imageBox updated');\n  } catch (error) {\n    console.log('error updating document', error);\n  }\n};\n\n//fetch adhar urls of tenants\n\nexport const roomUrl = async data => {\n  console.log('here is data', data);\n  try {\n    const folderRefII = ref(storage, `${data.houseId}_${data.roomNumber}/`);\n    const list = await listAll(folderRefII);\n    const urls = await Promise.all(list.items.map(async item => {\n      const url = await getDownloadURL(item);\n      console.log('yo');\n      return url;\n    }));\n    console.log('yoII', urls);\n    await updateRoomUrls(urls, data);\n  } catch (error) {\n    console.log('error', error);\n    return null;\n  }\n};\n//function to update fetched image urls to imagebox\n\nexport const updateRoomUrls = async (url, docData) => {\n  const DocumentRef = doc(db, `${docData.houseId}`, `${docData.houseId}_${docData.roomNumber}`);\n  try {\n    await updateDoc(DocumentRef, {\n      'imagebox': url\n    });\n    console.log('imageBox updated');\n  } catch (error) {\n    console.log('error updating document', error);\n  }\n};\n\n//fetching individual document to send a request to admin\nexport const fetchDoc = async data => {\n  console.log(data);\n  try {\n    const docRef = doc(db, `${data.houseId}`, `${data.houseId}_${data.roomNumber}`);\n    const docSnapShot = await getDoc(docRef);\n    if (docSnapShot) {\n      const req = docSnapShot.data();\n      ;\n      await unApprovedRoomsRequest(req);\n      console.log('my data', req);\n      return req;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//function to upload the above document to the UnapprovedRooms\n\nexport const unApprovedRoomsRequest = async data => {\n  try {\n    const docRef = doc(db, 'RoomRequests', `${data.houseId}_${data.roomNumber}`);\n    await setDoc(docRef, data);\n    console.log('request successfully sent');\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//function to create unApprovedRoomDisplayRequests \nexport const roomRequests = async data => {\n  console.log('fetched document', data);\n  try {\n    const docRef = doc(db, 'UnapprovedRooms', `${data.houseId}_${data.roomNumber}`);\n    await uploadBytes(docRef, data);\n    console.log('request sent successfully');\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//funciton to fetch the details of individual room request inorder to display it to the admin\n\nexport const individualRoomRequest = async roomId => {\n  console.log(roomId);\n  try {\n    const collectionRef = collection(db, 'RoomRequests');\n    const docRef = doc(collectionRef, `${roomId.roomId}`);\n    const docSnapShot = await getDoc(docRef);\n    if (docSnapShot.exists()) {\n      const data = docSnapShot.data();\n      console.log(data);\n      return data;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//set document to the folder through which data is fetched in the front end;\n\nexport const uploadToRoomData = async (data, roomId) => {\n  try {\n    const docRef = doc(db, 'roomData', `${roomId.roomId}`);\n    const reqDocRef = doc(db, 'RoomRequests', `${roomId.roomId}`);\n    await setDoc(docRef, data);\n    console.log('request accept success');\n    await deleteDoc(reqDocRef);\n  } catch (error) {\n    console.log(error);\n  }\n  ;\n};\n//function to delete requests\nexport const deleteRequestsData = async roomId => {\n  try {\n    const docRef = doc(db, 'RoomRequets', `${roomId.roomId}`);\n    await deleteDoc(docRef);\n    console.log('rejection Successfull');\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//function to fetch the roomId list of a partiuclar houseOwner;\nexport const roomIdFetching = async houseId => {\n  console.log(houseId.houseId);\n  try {\n    const collectionRef = collection(db, `${houseId.houseId}`);\n    const q = query(collectionRef);\n    const roomsSnapShot = await getDocs(q);\n    console.log('entered the if block');\n    const roomMap = roomsSnapShot.docs.reduce((acc, snap) => {\n      const {\n        roomNumber\n      } = snap.data();\n      acc[roomNumber] = {\n        roomNumber\n      };\n      console.log(acc);\n      return acc;\n    }, {});\n    console.log(roomMap);\n    return roomMap;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//user Authentication sector\nconst auth = getAuth();\nexport const signUpUserWithEmailAndPassword = async (email, password) => {\n  try {\n    await createUserWithEmailAndPassword(auth, email, password);\n    console.log('user SignUp success');\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const signInUserwithEmailAndPassword = async (email, password) => {\n  try {\n    const user = await signInWithEmailAndPassword(auth, email, password);\n    console.log(user);\n    return user;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n//Building Custom Authentication\n// const auth = getAuth();\n\n// export const createAdminSignUp = async(email, password) => {\n//     try{\n//         const adminCredentials = await createUserWithEmailAndPassword(auth, email, password);\n//         const admin = adminCredentials.user;\n//         const id = admin.uid;\n//         console.log(id);\n//         console.log(\"adminUser creation success\", admin);\n//         const role = 'admin';\n//         await callCustomClaimsHandler(id, role);\n//     } catch(error) {\n//         console.log('error creating document', error);\n//     }\n// }\n\n// export const callCustomClaimsHandler = async(uid, role) => {\n//     try{\n//         await createCustomToken(uid, {role});\n//         console.log('custom user claims setting done');\n//     } catch(error){\n//         console.log(error);\n//     }\n// }","map":{"version":3,"names":["initializeApp","getDoc","setDoc","doc","getFirestore","collection","updateDoc","query","getDocs","deleteDoc","getStorage","ref","uploadBytes","getDownloadURL","listAll","getAuth","createUserWithEmailAndPassword","signInWithEmailAndPassword","getAnalytics","logEvent","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","analytics","db","eventData","type","name","content_type","content_id","createRoomDocument","data","CollectionRef","DocumentRef","houseId","DocumentSnapShot","exists","createdAt","Date","error","console","log","updateImageBox","updatedData","roomName","updateIsEmpty","RoomDocumentRef","id","createRequestDocument","collectionRef","documentRef","emailId","uploadLegalDocument","img","email","adharRef","storage","folderRef","imageFile","creationRef","uploadLegalDocumentII","fetchAdharUrl","docRef","imageRef","imageList","urls","Promise","all","items","map","item","url","updateAdharUrl","adharUrls","adharCard","fetchHouseDocUrl","updateHouseDocUrl","houseDocUrl","houseDoc","uploadImages","imageFiles","storageRef","fileRef","fetchUrls","list","getRoomInfo","roomCollectionRef","roomDocRef","documentsSnapshot","documents","roomsMapArray","q","roomsSnapShot","roomMap","docs","reduce","acc","snap","features","roomDescription","liked","price","washroom","roomReviews","imageBox","isEmpty","viewRequests","individualRequests","docSnapShot","createApprovedAdmins","admin","deleteRequests","mergeHouseId","fetchOwnerInfo","setApartmentData","roomNumber","roomsImgUpload","i","imgRef","uploadTenantAdhar","folderRefI","folderRefII","imageNameRef","unApprovedRooms","tenantUrl","updateTenantAdharCard","docData","roomUrl","updateRoomUrls","fetchDoc","req","unApprovedRoomsRequest","roomRequests","individualRoomRequest","roomId","uploadToRoomData","reqDocRef","deleteRequestsData","roomIdFetching","auth","signUpUserWithEmailAndPassword","password","signInUserwithEmailAndPassword","user"],"sources":["C:/Users/nisch/Desktop/Rentzzz/Rentz555-v2/src/utils/firebase.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\n\r\nimport {  getDoc, setDoc, doc, getFirestore, collection, updateDoc, query, getDocs, deleteDoc}   from 'firebase/firestore';\r\nimport {getStorage, ref, uploadBytes, getDownloadURL, listAll } from 'firebase/storage';\r\n\r\nimport {getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword } from 'firebase/auth'\r\n\r\nimport { getAnalytics, logEvent } from \"firebase/analytics\";\r\n\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDEbn57UVIaoPmT8C8NrV_3WMmIKs9R4YE\",\r\n  authDomain: \"rentz-555.firebaseapp.com\",\r\n  projectId: \"rentz-555\",\r\n  storageBucket: \"rentz-555.appspot.com\",\r\n  messagingSenderId: \"36444490901\",\r\n  appId: \"1:36444490901:web:9b54077949595de2b01f9c\",\r\n  measurementId: \"G-8MK34XN24L\"\r\n};\r\n\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst analytics = getAnalytics(app);\r\n\r\n const db = getFirestore();\r\n\r\n export const eventData = (type,name) =>{\r\n\r\n    if(type === 'filter'){\r\n\r\n        logEvent(analytics, 'filter', {\r\n            content_type: name,\r\n            content_id: type\r\n          });\r\n    }\r\n    if(type === 'selected_room'){\r\n        logEvent(analytics, 'select_room', {\r\n            content_type: name,\r\n            content_id: type\r\n          });\r\n    }\r\n} \r\n\r\n //initializing admin\r\n \r\n\r\n \r\n\r\n//creating room document;\r\nexport const createRoomDocument = async (data) => {\r\n    const CollectionRef =  collection(db, 'roomData');\r\n    const DocumentRef =  doc(CollectionRef, `${data.houseId}`)\r\n    const DocumentSnapShot = await getDoc(DocumentRef);\r\n\r\n    if(!DocumentSnapShot.exists()) {\r\n        const createdAt = new Date();\r\n        try {\r\n            await setDoc(DocumentRef, {\r\n                createdAt,\r\n                ...data\r\n            } )\r\n        } catch (error) {\r\n            console.log('error setting document', error);\r\n        }\r\n    }\r\n    return DocumentSnapShot;\r\n} \r\n\r\n export const updateImageBox = async (updatedData, roomName) => {\r\n     const DocumentRef = doc(db, 'roomData', `${roomName}`);\r\n     \r\n\r\n    try {\r\n        \r\n        await updateDoc(DocumentRef,{ 'imageBox' : updatedData });\r\n        console.log('imageBox updated')\r\n    } catch (error) {\r\n        console.log('error updating document', error);\r\n    }\r\n }\r\n\r\n export const updateIsEmpty = async (updatedData, roomName) => {\r\n    console.log(updatedData);\r\n    console.log(roomName);\r\n   \r\n    \r\n\r\n   try {\r\n    const RoomDocumentRef = doc(db, 'roomData', roomName.id);\r\n       await updateDoc(RoomDocumentRef,{ 'isEmpty' : updatedData });\r\n       console.log('this document will now be displyed or de-displayed according to what you choose');\r\n   } catch (error) {\r\n       console.log('error updating document', error);\r\n   }\r\n}\r\n\r\n//creating documents of all the requests of owners to do business with us;\r\nexport const createRequestDocument = async(data) => {\r\n    try{\r\n        const collectionRef = collection(db, 'Requests');\r\n        const documentRef = doc(collectionRef, `${data.emailId}`);\r\n\r\n       await setDoc(documentRef, data);\r\n       console.log('document Creation Success');\r\n            \r\n    } catch(error){\r\n        console.log(error);\r\n    };\r\n}\r\n\r\nexport const uploadLegalDocument = async(img, email) => {\r\n    try{\r\n        const adharRef = ref(storage, `request:${email}/`);\r\n        const folderRef = ref(adharRef,'adharCard' );\r\n        for(const imageFile of img){\r\n           const creationRef = ref(folderRef, imageFile.name);\r\n           await uploadBytes(creationRef, imageFile);\r\n           console.log('image updated');\r\n        }\r\n    } catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const uploadLegalDocumentII = async(img, email) => {\r\n    try{\r\n        const adharRef = ref(storage, `request:${email}/`);\r\n        const folderRef = ref(adharRef,'HouseDocument' );\r\n        for(const imageFile of img){\r\n           const creationRef = ref(folderRef, imageFile.name);\r\n           await uploadBytes(creationRef, imageFile);\r\n           console.log('image updated');\r\n        }\r\n    } catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n//fetching adhar card image from firebase storage to firestore\r\n\r\n\r\n\r\nexport const fetchAdharUrl = async (email) => {\r\n  try {\r\n    const docRef = ref(storage, `request:${email}/`);\r\n    const imageRef = ref(docRef, 'adharCard');\r\n    const imageList = await listAll(imageRef);\r\n    const urls = await Promise.all(\r\n      imageList.items.map(async (item) => {\r\n        const url = await getDownloadURL(item);\r\n        return url;\r\n      })\r\n    );\r\n    console.log(urls);\r\n    await updateAdharUrl(urls, email); // Update the Firestore document with the URLs\r\n    return urls;\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateAdharUrl = async (adharUrls, email) => {\r\n  try {\r\n    const docRef = doc(db, 'Requests', `${email}`)\r\n    await updateDoc(docRef, {adharCard: adharUrls})\r\n    console.log('adharCard Update Successful');\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n//fetching houseDocument from firebase storage to firestore\r\nexport const fetchHouseDocUrl = async(email) => {\r\n    try{\r\n        const docRef = ref(storage, `request:${email}/`);\r\n        const imageRef = ref(docRef, 'HouseDocument/' );\r\n        const imageList = await listAll(imageRef);\r\n        const urls = await Promise.all(imageList.items.map(async(item) => {\r\n            const url = await getDownloadURL(item);\r\n            return url;\r\n        }))\r\n      \r\n        await updateHouseDocUrl(urls, email)\r\n        return urls;\r\n\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n }\r\n\r\n export const updateHouseDocUrl = async(houseDocUrl, email) => {\r\n    try{\r\n        const docRef = doc(db, 'Requests', `${email}`);\r\n        await updateDoc(docRef, {houseDoc: houseDocUrl});\r\n        console.log('HouseDoc Update Successful');\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n }\r\n\r\n// storage functions\r\nexport const storage = getStorage(app);\r\n\r\n\r\nexport const uploadImages = async(imageFiles, houseId) => {\r\n    console.log(houseId);\r\n    const storageRef = ref(storage, `${houseId}/`);\r\n    try{\r\n        for(const imageFile of imageFiles) {\r\n            const fileRef = ref(storageRef, imageFile.name);\r\n            await uploadBytes(fileRef, imageFile);\r\n            console.log('image upload success');\r\n\r\n        };\r\n    } catch(error) {\r\n        console.log('error uploading the document');\r\n    };\r\n    return storageRef;\r\n}\r\n\r\n//fetching urls\r\nexport const fetchUrls = async (houseId) => {\r\n    try {\r\n        const folderRef = ref(storage, `${houseId}/`);\r\n        const list = await listAll(folderRef);\r\n        const urls = await Promise.all(list.items.map(async (item) => {\r\n            const url = await getDownloadURL(item);\r\n            console.log(url);\r\n            return url;\r\n        }));\r\n        console.log(urls);\r\n        await updateImageBox(urls, houseId);\r\n        } catch(error) {\r\n        console.log('error', error);\r\n        return null\r\n    }\r\n}\r\n\r\n//Fetching a particular room's data.\r\nexport const getRoomInfo = async (houseId) => {\r\n    \r\n    \r\n    try{\r\n        const roomCollectionRef = collection(db, 'roomData');\r\n        const roomDocRef = doc(roomCollectionRef, `${houseId}`);\r\n        \r\n       const documentsSnapshot = await getDoc(roomDocRef);\r\n       if(documentsSnapshot.exists()) {\r\n        const documents = documentsSnapshot.data();\r\n       \r\n        console.log('firebase',documents);\r\n        return documents;\r\n       }\r\n       \r\n    } catch(error) {\r\n        console.log(error);\r\n        \r\n    };\r\n  \r\n}\r\n\r\n//fetching the room data to the front end..\r\n\r\nexport const roomsMapArray = async () => {\r\n    const collectionRef = collection(db, 'roomData');\r\n    const q = query(collectionRef);\r\n    const roomsSnapShot = await getDocs(q);\r\n\r\n    const roomMap = roomsSnapShot.docs.reduce((acc, snap) => {\r\n        const { houseId, features, type, roomDescription, liked, price, washroom, roomReviews, imageBox, isEmpty} = snap.data();\r\n        if(isEmpty) {\r\n\r\n             acc[ houseId ] = { houseId, features, type, roomDescription, liked, price, washroom, roomReviews, imageBox, isEmpty};\r\n        } \r\n\r\n        return acc;\r\n\r\n    },{})\r\n    return roomMap;\r\n           \r\n            }\r\n//Display Array of Requests\r\nexport const viewRequests = async () => {\r\n    const collectionRef = collection(db, 'Requests');\r\n    const q = query(collectionRef);\r\n    const roomsSnapShot = await getDocs(q);\r\n\r\n    const roomMap = roomsSnapShot.docs.reduce((acc, snap) => {\r\n        const { emailId } = snap.data();\r\n         acc[ emailId ] = { emailId};\r\n    return acc;\r\n\r\n    },{})\r\n    return roomMap;\r\n           \r\n            }\r\n\r\n//fetching indivudual request from db based on email id \r\nexport const individualRequests = async (email) => {\r\n    console.log(email);\r\n    try{\r\n        const collectionRef = collection(db, 'Requests');\r\n        const docRef = doc(collectionRef, `${email.email}`);\r\n        const docSnapShot = await getDoc(docRef);\r\n        if(docSnapShot.exists()) {\r\n            const data = docSnapShot.data();\r\n            console.log(data);\r\n            return data;\r\n\r\n        }\r\n        \r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\n//function to set data inside approved owner Admin\r\n\r\nexport const createApprovedAdmins = async (admin) => {\r\n    try{\r\n        const docRef = doc(db, 'approvedAdmins', `${admin.emailId}`);\r\n        await setDoc(docRef, admin);\r\n        console.log('setting of document is complete');\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\nexport const deleteRequests = async (email) => {\r\n    try{\r\n       const docRef = doc(db, 'Requests', `${email}`);\r\n        await deleteDoc(docRef);\r\n        console.log('request successfully removed')\r\n        \r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n\r\n//merging houseId\r\nexport const mergeHouseId = async (email, id) => {\r\n    const collectionRef = doc(db, 'ownerAdmin', `${email}`);\r\n    console.log('running 1');\r\n    try {\r\n      await updateDoc(collectionRef, { houseId: id });\r\n      console.log('Merge operation completed successfully.');\r\n    } catch (error) {\r\n      console.error('Error merging field:', error);\r\n    }\r\n  };\r\n\r\n  //fetch owner individual document;\r\n  export const fetchOwnerInfo = async (email) => {\r\n    console.log(email);\r\n    try{\r\n        const collectionRef = collection(db, 'approvedAdmins');\r\n        const docRef = doc(collectionRef, `${email}`);\r\n        const docSnapShot = await getDoc(docRef);\r\n        if(docSnapShot.exists()) {\r\n            const data = docSnapShot.data();\r\n            console.log(data);\r\n            return data;\r\n\r\n        }\r\n        \r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n};\r\n//function to set data inside appropriate Apartments\r\nexport const setApartmentData = async (data) => {\r\n    console.log('hi its reaching here');\r\n    try{\r\n        const docRef = doc(db,`${data.houseId}`, `${data.houseId}_${data.roomNumber}`);\r\n        await setDoc(docRef, data);\r\n        console.log('setting of document is complete');\r\n    } catch(error) {\r\n        console.log(error);\r\n    };\r\n}\r\n\r\n//function to upload images\r\n\r\nexport const roomsImgUpload = async (data, img) => {\r\n    try{\r\n        const folderRef = ref(storage, `${data.houseId}_${data.roomNumber}/`);\r\n        for(const i of img) {\r\n            const imgRef = ref(folderRef, i.name);\r\n            await uploadBytes(imgRef, i);\r\n            \r\n            console.log('upload success');\r\n         };\r\n    } catch(error) {\r\n        console.log(error);\r\n    };\r\n} ;\r\n\r\nexport const uploadTenantAdhar = async( data, img ) => {\r\n    try{\r\n        const folderRefI = ref(storage, 'tenantsDoc/' );\r\n        const folderRefII = ref(folderRefI, `${data.houseId}_${data.roomNumber}/`);\r\n      \r\n        for(const i of img) {\r\n            const imageNameRef = ref(folderRefII, i.name);\r\n            await uploadBytes(imageNameRef, i);\r\n            console.log('success');\r\n         }\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n//function to fetch the rooms which have not been approved\r\nexport const unApprovedRooms = async () => {\r\n    const collectionRef = collection(db, 'RoomRequests');\r\n    const q = query(collectionRef);\r\n    const roomsSnapShot = await getDocs(q);\r\n\r\n    const roomMap = roomsSnapShot.docs.reduce((acc, snap) => {\r\n        const { houseId, roomNumber} = snap.data();\r\n    \r\n\r\n             acc[ houseId ] = { houseId, roomNumber};\r\n        \r\n\r\n        return acc;\r\n\r\n    },{})\r\n    return roomMap;\r\n           \r\n            }\r\n\r\n//fetch adhar urls of tenants\r\n\r\n export const tenantUrl = async(data) => {\r\n    console.log('here is data',data);\r\n    \r\n        try {\r\n            const folderRef = ref(storage, 'tenantsDoc/')\r\n            const folderRefII=ref(folderRef, `${data.houseId}_${data.roomNumber}/`);\r\n            const list = await listAll(folderRefII);\r\n            const urls = await Promise.all(list.items.map(async (item) => {\r\n                const url = await getDownloadURL(item);\r\n                console.log('yo');\r\n                return url;\r\n            }));\r\n            console.log('yoII',urls);\r\n            await updateTenantAdharCard(urls, data);\r\n            \r\n            } catch(error) {\r\n            console.log('error', error);\r\n            return null\r\n        }\r\n    }\r\n//function to update fetched image urls to imagebox\r\n\r\nexport const updateTenantAdharCard = async (url, docData) => {\r\n    const DocumentRef = doc(db,`${docData.houseId}`, `${docData.houseId}_${docData.roomNumber}`);\r\n    \r\n\r\n   try {\r\n       \r\n       await updateDoc(DocumentRef,{ 'tenant_adhar' : url });\r\n       console.log('imageBox updated')\r\n   } catch (error) {\r\n       console.log('error updating document', error);\r\n   }\r\n}\r\n\r\n//fetch adhar urls of tenants\r\n\r\nexport const roomUrl = async(data) => {\r\n    console.log('here is data',data);\r\n    \r\n        try {\r\n            \r\n            const folderRefII=ref(storage, `${data.houseId}_${data.roomNumber}/`);\r\n            const list = await listAll(folderRefII);\r\n            const urls = await Promise.all(list.items.map(async (item) => {\r\n                const url = await getDownloadURL(item);\r\n                console.log('yo');\r\n                return url;\r\n            }));\r\n            console.log('yoII',urls);\r\n            await updateRoomUrls(urls, data);\r\n            \r\n            } catch(error) {\r\n            console.log('error', error);\r\n            return null\r\n        }\r\n    }\r\n//function to update fetched image urls to imagebox\r\n\r\nexport const updateRoomUrls = async (url, docData) => {\r\n    const DocumentRef = doc(db,`${docData.houseId}`, `${docData.houseId}_${docData.roomNumber}`);\r\n    \r\n\r\n   try {\r\n       \r\n       await updateDoc(DocumentRef,{ 'imagebox' : url });\r\n       console.log('imageBox updated')\r\n   } catch (error) {\r\n       console.log('error updating document', error);\r\n   }\r\n}\r\n\r\n//fetching individual document to send a request to admin\r\n    export const fetchDoc = async (data) => {\r\n        console.log(data);\r\n        try{\r\n            const docRef = doc(db, `${data.houseId}`, `${data.houseId}_${data.roomNumber}`);\r\n            const docSnapShot = await getDoc(docRef);\r\n                if(docSnapShot) {\r\n               const req = docSnapShot.data();;\r\n                await unApprovedRoomsRequest(req);\r\n               console.log('my data', req);\r\n                    return req\r\n                }\r\n            \r\n           \r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n//function to upload the above document to the UnapprovedRooms\r\n\r\n    export const unApprovedRoomsRequest = async (data) => {\r\n        try {\r\n            const docRef = doc(db, 'RoomRequests', `${data.houseId}_${data.roomNumber}`)\r\n            await setDoc(docRef, data);\r\n            console.log('request successfully sent');\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n//function to create unApprovedRoomDisplayRequests \r\n   export const roomRequests = async(data) => {\r\n    console.log('fetched document', data);\r\n        try{\r\n            const docRef = doc(db, 'UnapprovedRooms', `${data.houseId}_${data.roomNumber}`);\r\n            await uploadBytes(docRef, data);\r\n            console.log('request sent successfully');\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n   };\r\n\r\n   //funciton to fetch the details of individual room request inorder to display it to the admin\r\n\r\nexport const individualRoomRequest = async (roomId) => {\r\n    console.log(roomId);\r\n    try{\r\n        const collectionRef = collection(db, 'RoomRequests');\r\n        const docRef = doc(collectionRef, `${roomId.roomId}`);\r\n        const docSnapShot = await getDoc(docRef);\r\n        if(docSnapShot.exists()) {\r\n            const data = docSnapShot.data();\r\n            console.log(data);\r\n            return data;\r\n\r\n        }\r\n        \r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n//set document to the folder through which data is fetched in the front end;\r\n\r\n    export const uploadToRoomData = async(data, roomId) => {\r\n        try {\r\n            const docRef = doc(db, 'roomData', `${roomId.roomId}`);\r\n            const reqDocRef = doc(db,'RoomRequests', `${roomId.roomId}`)\r\n            await setDoc(docRef, data);\r\n            console.log('request accept success');\r\n            await deleteDoc(reqDocRef);\r\n        } catch(error) {\r\n            console.log(error);\r\n        };\r\n    };\r\n//function to delete requests\r\n    export const deleteRequestsData = async (roomId) => {\r\n        try{\r\n            const docRef = doc(db, 'RoomRequets', `${roomId.roomId}`);\r\n            await deleteDoc(docRef);\r\n            console.log('rejection Successfull');\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n\r\n    };\r\n\r\n//function to fetch the roomId list of a partiuclar houseOwner;\r\nexport const roomIdFetching = async (houseId) => {\r\n    console.log(houseId.houseId);\r\n    try {\r\n      const collectionRef = collection(db, `${houseId.houseId}`);\r\n      const q = query(collectionRef);\r\n      const roomsSnapShot = await getDocs(q);\r\n  \r\n        console.log('entered the if block');\r\n        const roomMap = roomsSnapShot.docs.reduce((acc, snap) => {\r\n          const { roomNumber } = snap.data();\r\n          acc[roomNumber] = { roomNumber };\r\n          console.log(acc);\r\n          return acc;\r\n        }, {});\r\n        console.log(roomMap);\r\n        return roomMap;\r\n      \r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n\r\n//user Authentication sector\r\nconst auth = getAuth();\r\n\r\nexport const signUpUserWithEmailAndPassword = async(email, password) => {\r\n    try{\r\n        await createUserWithEmailAndPassword(auth, email, password);\r\n        console.log('user SignUp success');\r\n    } catch(error){\r\n        console.log(error);\r\n\r\n    }\r\n}\r\n\r\nexport const signInUserwithEmailAndPassword = async(email, password) => {\r\n    try{\r\n        const user = await signInWithEmailAndPassword(auth, email, password);\r\n        console.log(user);\r\n        return user;\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n//Building Custom Authentication\r\n// const auth = getAuth();\r\n\r\n// export const createAdminSignUp = async(email, password) => {\r\n//     try{\r\n//         const adminCredentials = await createUserWithEmailAndPassword(auth, email, password);\r\n//         const admin = adminCredentials.user;\r\n//         const id = admin.uid;\r\n//         console.log(id);\r\n//         console.log(\"adminUser creation success\", admin);\r\n//         const role = 'admin';\r\n//         await callCustomClaimsHandler(id, role);\r\n//     } catch(error) {\r\n//         console.log('error creating document', error);\r\n//     }\r\n// }\r\n\r\n// export const callCustomClaimsHandler = async(uid, role) => {\r\n//     try{\r\n//         await createCustomToken(uid, {role});\r\n//         console.log('custom user claims setting done');\r\n//     } catch(error){\r\n//         console.log(error);\r\n//     }\r\n// }\r\n        "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}